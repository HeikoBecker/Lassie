#######################################################################
# Domain knowledge is written here in a mix of whitespace- or
# comma-separated values. For each line, the first token is a HOL
# component and the second is the attribute we want to specify. What
# follows is a comma-separated list of values which characterize this
# attribute of that component. In the list (and nowhere else) can tokens
# contain whitespaces. This allows SML types and expressions of more
# than one word to be represented naturally.
#
# The `type` attribute is the only one required for each component
# (required for forcing well-typed terms in the grammar). All attributes
# give rise to a syntactic category of the same name (e.g. `name` gives
# rise to the `$name` cat) which hold values of that attribute during
# derivation.

# TYPES
GSYM 		   type  thm -> thm
Induct_on 	   type  term quotation -> tactic
POW_2 		   type  thm
REAL 		   type  thm
REAL_ADD 	   type  thm
REAL_ADD_ASSOC 	   type  thm
REAL_ADD_LDISTRIB  type  thm
REAL_ADD_RDISTRIB  type  thm
REAL_ADD_SYM 	   type  thm
REAL_DIV_LZERO 	   type  thm
REAL_DOUBLE 	   type  thm
REAL_HALF_DOUBLE   type  thm
REAL_LDISTRIB 	   type  thm
REAL_MUL 	   type  thm
REAL_MUL_LID 	   type  thm
REAL_MUL_RID 	   type  thm
REAL_MUL_RINV 	   type  thm
REAL_MUL_SYM 	   type  thm
REAL_NEG_ADD 	   type  thm
REAL_NEG_LMUL 	   type  thm
REAL_RDISTRIB 	   type  thm
REAL_SUB_LDISTRIB  type  thm
REAL_SUB_RDISTRIB  type  thm
cheat 		   type  tactic
fs 		   type  thmlist -> tactic
irule 		   type  thm -> tactic
ntac 		   type  int -> tactic -> tactic
once_rewrite_tac   type  thmlist -> tactic
real_div 	   type  thm
real_sub 	   type  thm
rewrite_tac 	   type  thmlist -> tactic
rpt 		   type  tactic -> tactic
strip_tac 	   type  tactic

# NAME FEATURES
GSYM		   name  gsym, symmetry, reverse
Induct_on	   name  induction
POW_2              name  power, square, two
REAL		   name  real
REAL_ADD	   name  real, addition
REAL_ADD_ASSOC	   name  real, addition, associativity
REAL_ADD_LDISTRIB  name  real, addition, left, distributivity
REAL_ADD_RDISTRIB  name  real, addition, right, distributivity
REAL_ADD_SYM	   name  real, addition, symmetry
REAL_DIV_LZERO	   name  real, division, left, zero
REAL_DOUBLE	   name  real, double
REAL_HALF_DOUBLE   name  real, half, double
REAL_LDISTRIB	   name  real, left, distributivity
REAL_MUL	   name  real, multiplication
REAL_MUL_LID	   name  real, multiplication, left, identity
REAL_MUL_RID	   name  real, multiplication, right, identity
REAL_MUL_RINV	   name  real, multiplication, right, inverse
REAL_MUL_SYM	   name  real, multiplication, symmetry
REAL_NEG_ADD	   name  real, negation, addition
REAL_NEG_LMUL	   name  real, negation, left, multiplication
REAL_RDISTRIB	   name  real, right, distributivity
REAL_SUB_LDISTRIB  name  real, subtraction, left, distributivity
REAL_SUB_RDISTRIB  name  real, subtraction, right, distributivity
cheat		   name  cheat
fs		   name  full simplification, simplification
irule		   name  irule, implication, modus ponens
ntac		   name  ntac, repeat
once_rewrite_tac   name  once, rewrite, tactic
real_div	   name  real, division
real_sub	   name  real, subtraction
rewrite_tac	   name  rewrite, tactic
rpt		   name  repeat
strip_tac	   name  strip, tactic