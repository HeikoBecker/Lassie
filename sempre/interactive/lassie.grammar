(rule $ROOT ($Tactic) (lambda t (: tacReturn (var t))) (anchored 1))
(for @cat ($Tactic $ListTactic $ThmTactic)
     (rule @cat (\( @cat \)) (lambda t (call parens (var t))) (anchored 1)))

# Tactics
(for @then (THEN \\\\)
     (rule $Tactic ($Tactic @then $Tactic) (lambda t1 (lambda t2 (call tacThen (var t1) (var t2)))) (anchored 1)))

(for @then (THEN1 >-)
     (rule $Tactic ($Tactic @then $Tactic) (lambda t1 (lambda t2 (call tacThen1 (var t1) (var t2)))) (anchored 1)))

(rule $Tactic ($TOKEN) (SimpleLexiconFn (type en.tactic)) (anchored 1))
(rule $Tactic ($ThmTactic $Theorem) (lambda t1 (lambda t2 (call fnApp (var t1) (var t2)))) (anchored 1))
(rule $Tactic ($ListTactic $ThmList) (lambda t1 (lambda t2 (call fnApp (var t1) (var t2)))) (anchored 1))
(rule $Tactic ($Term by $Tactic) (lambda q (lambda t (call infix by (var q) (var t)))) (anchored 1))

# Tacticals
(rule $ListTactic ($TOKEN) (SimpleLexiconFn (type en.listtactic)) (anchored 1))
(rule $ThmTactic ($TOKEN) (SimpleLexiconFn (type en.thmtactic)) (anchored 1))

# Theorems
(rule $Theorem ($TOKEN) (SimpleLexiconFn (type en.theorem)) (anchored 1))
(rule $Theorems ($Theorem) (IdentityFn) (anchored 1))
(rule $Theorems ($Theorem , $Theorems) (lambda t1 (lambda t2 (call seqCons (var t1) (var t2)))) (anchored 1))

(rule $ThmList ([ $Theorems ]) (lambda thms (call mkList (var thms))) (anchored 1))
(rule $ThmList ([ ]) (ConstantFn []) (anchored 1))

(rule $Tactic (cheat) (ConstantFn cheat) (anchored 1))

# Other
(rule $Term (` $PHRASE `) (lambda e (call quote (var e))) (anchored 1))

# Modifiers/special cases
(rule $Tactic (rpt $Tactic) (lambda t (call fnApp rpt (var t))) (anchored 1))
(rule $Theorem (GSYM $Theorem) (lambda t (call fnApp GSYM (var t))) (anchored 1))
(rule $Tactic (Induct_on $Term) (lambda t (call fnApp Induct_on (var t))) (anchored 1))

# Unrecognized tokens can be custom tactics, theorems (definitions) 
(rule $Tactic ($TOKEN) (IdentityFn) (anchored 1))
(rule $Theorem ($TOKEN) (IdentityFn) (anchored 1))
