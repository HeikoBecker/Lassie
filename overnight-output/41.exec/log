main() {
  Execution directory: state/execs/41.exec
  Grammar.read {
    WARNING: Category not defined in the grammar: $VP; used in rule: $Intermediate14 -> that $VP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate26 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate29 -> $Intermediate28 $VP/NP (SelectFn 1)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate31 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $VP/NP; used in rule: $Intermediate33 -> that $VP/NP (SelectFn 0)
    WARNING: Category not defined in the grammar: $EntityNP2; used in rule: $NP0 -> $Intermediate41 $EntityNP2 (JoinFn forward betaReduce)
    WARNING: Category not defined in the grammar: $BinaryOp; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    WARNING: Category not defined in the grammar: $EntityNP2; used in rule: $BinaryOpRight -> $BinaryOp $EntityNP2 (JoinFn betaReduce forward)
    Valid tags: [general, generate, geo440, geo880, parse, regex]
    Used tags: [general, generate]
    122 rules
  }
  FloatingParser: 27 catUnaryRules (sorted), 95 nonCatUnaryRules (in trie)
  Dataset.read {
    Reading overnight/null.examples {
      Example overnight/null.examples:0 (0): [null] => null
    }
  }
  Learner.learn() {
    Iteration 0/0 {
      Processing iter=0.train: 1 examples {
        Examples {
          iter=0.train: example 0/1: overnight/null.examples:0 {
            Example: null {
              Tokens: [null]
              Lemmatized tokens: [null]
              POS tags: [UNK]
              NER tags: [UNK]
              NER values: [UNK]
              Dependency children: []
            }
            Parser.parse: parse {
              WARNING: Currently CatSizeBound is usable only when useSizeInsteadOfDepth = true.
              FloatingParser.infer() {
                ExternalDomain.createEntities: overnight/lassie.db {
                  Parser.ensureExecuted 
                } [2.0s, cum. 2.0s]
              } [2.0s, cum. 2.0s]
              Parser.setEvaluation: 1581 candidates {
                Pred@0000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is successor")) [score=12.255, prob=0.010]
                Pred@0001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose domain is the reals")) [score=12.118, prob=0.009]
                Pred@0002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is successor")) [score=12.098, prob=0.009]
                Pred@0003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is successor")) [score=12.090, prob=0.009]
                Pred@0004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose domain is the reals")) [score=11.848, prob=0.007]
                Pred@0005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is square")) [score=11.812, prob=0.007]
                Pred@0006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose domain is numbers")) [score=11.781, prob=0.007]
                Pred@0007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is successor")) [score=11.742, prob=0.006]
                Pred@0008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is divide")) [score=11.684, prob=0.006]
                Pred@0009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is successor")) [score=11.614, prob=0.006]
                Pred@0010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is multiply")) [score=11.567, prob=0.005]
                Pred@0011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is square")) [score=11.531, prob=0.005]
                Pred@0012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose domain is the reals")) [score=11.529, prob=0.005]
                Pred@0013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is successor")) [score=11.500, prob=0.005]
                Pred@0014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is square")) [score=11.485, prob=0.005]
                Pred@0015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is power")) [score=11.459, prob=0.005]
                Pred@0016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose domain is the reals")) [score=11.417, prob=0.005]
                Pred@0017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is square")) [score=11.408, prob=0.004]
                Pred@0018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is successor")) [score=11.394, prob=0.004]
                Pred@0019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is square")) [score=11.394, prob=0.004]
                Pred@0020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is successor")) [score=11.364, prob=0.004]
                Pred@0021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is successor")) [score=11.351, prob=0.004]
                Pred@0022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose domain is numbers")) [score=11.334, prob=0.004]
                Pred@0023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose domain is numbers")) [score=11.327, prob=0.004]
                Pred@0024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is add")) [score=11.308, prob=0.004]
                Pred@0025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is square")) [score=11.304, prob=0.004]
                Pred@0026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is square")) [score=11.293, prob=0.004]
                Pred@0027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose domain is the reals")) [score=11.287, prob=0.004]
                Pred@0028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is add")) [score=11.275, prob=0.004]
                Pred@0029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is convert")) [score=11.275, prob=0.004]
                Pred@0030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is square")) [score=11.229, prob=0.004]
                Pred@0031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is cast")) [score=11.220, prob=0.004]
                Pred@0032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is successor")) [score=11.212, prob=0.004]
                Pred@0033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is cast")) [score=11.170, prob=0.004]
                Pred@0034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is successor")) [score=11.168, prob=0.004]
                Pred@0035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is square")) [score=11.138, prob=0.003]
                Pred@0036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose domain is numbers")) [score=11.118, prob=0.003]
                Pred@0037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is divide")) [score=11.115, prob=0.003]
                Pred@0038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is successor")) [score=11.096, prob=0.003]
                Pred@0039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose domain is the reals")) [score=11.089, prob=0.003]
                Pred@0040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is cast")) [score=11.068, prob=0.003]
                Pred@0041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is cast")) [score=11.054, prob=0.003]
                Pred@0042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is successor")) [score=11.053, prob=0.003]
                Pred@0043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is square")) [score=11.034, prob=0.003]
                Pred@0044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is successor")) [score=11.032, prob=0.003]
                Pred@0045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose domain is the reals")) [score=10.994, prob=0.003]
                Pred@0046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is add")) [score=10.965, prob=0.003]
                Pred@0047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is add")) [score=10.965, prob=0.003]
                Pred@0048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose domain is numbers")) [score=10.956, prob=0.003]
                Pred@0049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose domain is numbers")) [score=10.950, prob=0.003]
                Pred@0050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is cast")) [score=10.928, prob=0.003]
                Pred@0051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is successor")) [score=10.921, prob=0.003]
                Pred@0052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose domain is numbers")) [score=10.902, prob=0.003]
                Pred@0053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose domain is numbers")) [score=10.882, prob=0.003]
                Pred@0054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is power")) [score=10.836, prob=0.003]
                Pred@0055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose domain is the reals")) [score=10.829, prob=0.003]
                Pred@0056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is power")) [score=10.825, prob=0.003]
                Pred@0057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is divide")) [score=10.818, prob=0.002]
                Pred@0058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose domain is the reals")) [score=10.807, prob=0.002]
                Pred@0059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is successor")) [score=10.806, prob=0.002]
                Pred@0060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is cast")) [score=10.806, prob=0.002]
                Pred@0061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is none")) [score=10.798, prob=0.002]
                Pred@0062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is square")) [score=10.788, prob=0.002]
                Pred@0063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose domain is numbers")) [score=10.786, prob=0.002]
                Pred@0064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is successor")) [score=10.778, prob=0.002]
                Pred@0065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose domain is the reals")) [score=10.777, prob=0.002]
                Pred@0066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is distribute")) [score=10.770, prob=0.002]
                Pred@0067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is successor")) [score=10.769, prob=0.002]
                Pred@0068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is successor")) [score=10.769, prob=0.002]
                Pred@0069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is cast")) [score=10.759, prob=0.002]
                Pred@0070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose domain is the reals")) [score=10.753, prob=0.002]
                Pred@0071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is square")) [score=10.751, prob=0.002]
                Pred@0072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is add")) [score=10.739, prob=0.002]
                Pred@0073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is square")) [score=10.733, prob=0.002]
                Pred@0074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is successor")) [score=10.729, prob=0.002]
                Pred@0075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is cast")) [score=10.727, prob=0.002]
                Pred@0076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose domain is numbers")) [score=10.721, prob=0.002]
                Pred@0077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose domain is numbers")) [score=10.720, prob=0.002]
                Pred@0078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose domain is numbers")) [score=10.718, prob=0.002]
                Pred@0079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is cast")) [score=10.707, prob=0.002]
                Pred@0080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is convert")) [score=10.701, prob=0.002]
                Pred@0081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose domain is the reals")) [score=10.698, prob=0.002]
                Pred@0082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is cast")) [score=10.696, prob=0.002]
                Pred@0083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is zero")) [score=10.694, prob=0.002]
                Pred@0084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is none")) [score=10.677, prob=0.002]
                Pred@0085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is cast")) [score=10.676, prob=0.002]
                Pred@0086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is cast")) [score=10.669, prob=0.002]
                Pred@0087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is add")) [score=10.663, prob=0.002]
                Pred@0088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is successor")) [score=10.662, prob=0.002]
                Pred@0089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is power")) [score=10.658, prob=0.002]
                Pred@0090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is power")) [score=10.653, prob=0.002]
                Pred@0091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is successor")) [score=10.626, prob=0.002]
                Pred@0092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is successor")) [score=10.621, prob=0.002]
                Pred@0093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is add")) [score=10.615, prob=0.002]
                Pred@0094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose domain is numbers")) [score=10.610, prob=0.002]
                Pred@0095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is successor")) [score=10.609, prob=0.002]
                Pred@0096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose domain is the reals")) [score=10.596, prob=0.002]
                Pred@0097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is successor")) [score=10.589, prob=0.002]
                Pred@0098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is power")) [score=10.580, prob=0.002]
                Pred@0099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is power")) [score=10.576, prob=0.002]
                Pred@0100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is none")) [score=10.575, prob=0.002]
                Pred@0101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is compute")) [score=10.573, prob=0.002]
                Pred@0102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is cast")) [score=10.569, prob=0.002]
                Pred@0103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is none")) [score=10.567, prob=0.002]
                Pred@0104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is distribute")) [score=10.567, prob=0.002]
                Pred@0105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is successor")) [score=10.558, prob=0.002]
                Pred@0106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is square")) [score=10.554, prob=0.002]
                Pred@0107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose domain is the reals")) [score=10.551, prob=0.002]
                Pred@0108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is cast")) [score=10.546, prob=0.002]
                Pred@0109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose domain is numbers")) [score=10.527, prob=0.002]
                Pred@0110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is power")) [score=10.524, prob=0.002]
                Pred@0111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose secondary operator is half")) [score=10.521, prob=0.002]
                Pred@0112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is divide")) [score=10.520, prob=0.002]
                Pred@0113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is successor")) [score=10.514, prob=0.002]
                Pred@0114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is multiply")) [score=10.509, prob=0.002]
                Pred@0115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is cast")) [score=10.500, prob=0.002]
                Pred@0116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is power")) [score=10.499, prob=0.002]
                Pred@0117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is power")) [score=10.494, prob=0.002]
                Pred@0118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is simplify")) [score=10.490, prob=0.002]
                Pred@0119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is half")) [score=10.484, prob=0.002]
                Pred@0120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose domain is the reals")) [score=10.482, prob=0.002]
                Pred@0121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is cast")) [score=10.478, prob=0.002]
                Pred@0122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose domain is numbers")) [score=10.473, prob=0.002]
                Pred@0123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is distribute")) [score=10.446, prob=0.002]
                Pred@0124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is square")) [score=10.437, prob=0.002]
                Pred@0125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is successor")) [score=10.436, prob=0.002]
                Pred@0126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is square")) [score=10.431, prob=0.002]
                Pred@0127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is half")) [score=10.429, prob=0.002]
                Pred@0128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is none")) [score=10.426, prob=0.002]
                Pred@0129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is associate")) [score=10.425, prob=0.002]
                Pred@0130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is cast")) [score=10.425, prob=0.002]
                Pred@0131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is eliminate")) [score=10.424, prob=0.002]
                Pred@0132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is add")) [score=10.419, prob=0.002]
                Pred@0133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is cast")) [score=10.413, prob=0.002]
                Pred@0134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose domain is numbers")) [score=10.411, prob=0.002]
                Pred@0135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is add")) [score=10.409, prob=0.002]
                Pred@0136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is successor")) [score=10.407, prob=0.002]
                Pred@0137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is symmetry")) [score=10.407, prob=0.002]
                Pred@0138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose domain is numbers")) [score=10.406, prob=0.002]
                Pred@0139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is add")) [score=10.401, prob=0.002]
                Pred@0140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is divide")) [score=10.391, prob=0.002]
                Pred@0141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is cast")) [score=10.384, prob=0.002]
                Pred@0142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is split")) [score=10.383, prob=0.002]
                Pred@0143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is successor")) [score=10.382, prob=0.002]
                Pred@0144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is eliminate")) [score=10.381, prob=0.002]
                Pred@0145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is successor")) [score=10.379, prob=0.002]
                Pred@0146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is cast")) [score=10.372, prob=0.002]
                Pred@0147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is symmetry")) [score=10.361, prob=0.002]
                Pred@0148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is divide")) [score=10.356, prob=0.002]
                Pred@0149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is square")) [score=10.346, prob=0.002]
                Pred@0150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is cast")) [score=10.341, prob=0.002]
                Pred@0151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is distribute")) [score=10.319, prob=0.002]
                Pred@0152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is cast")) [score=10.317, prob=0.002]
                Pred@0153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is convert")) [score=10.308, prob=0.001]
                Pred@0154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is half")) [score=10.307, prob=0.001]
                Pred@0155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is square")) [score=10.305, prob=0.001]
                Pred@0156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is half")) [score=10.303, prob=0.001]
                Pred@0157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is power")) [score=10.300, prob=0.001]
                Pred@0158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is power")) [score=10.291, prob=0.001]
                Pred@0159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose domain is numbers")) [score=10.289, prob=0.001]
                Pred@0160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is divide")) [score=10.283, prob=0.001]
                Pred@0161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is simplify")) [score=10.272, prob=0.001]
                Pred@0162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is square")) [score=10.271, prob=0.001]
                Pred@0163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is associate")) [score=10.265, prob=0.001]
                Pred@0164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is power")) [score=10.264, prob=0.001]
                Pred@0165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is square")) [score=10.262, prob=0.001]
                Pred@0166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is cast")) [score=10.257, prob=0.001]
                Pred@0167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is convert")) [score=10.254, prob=0.001]
                Pred@0168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is distribute")) [score=10.253, prob=0.001]
                Pred@0169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is cast")) [score=10.249, prob=0.001]
                Pred@0170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is divide")) [score=10.244, prob=0.001]
                Pred@0171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is none")) [score=10.244, prob=0.001]
                Pred@0172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is distribute")) [score=10.243, prob=0.001]
                Pred@0173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is expand")) [score=10.238, prob=0.001]
                Pred@0174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose domain is the reals")) [score=10.232, prob=0.001]
                Pred@0175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is compute")) [score=10.225, prob=0.001]
                Pred@0176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is add")) [score=10.220, prob=0.001]
                Pred@0177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is successor")) [score=10.220, prob=0.001]
                Pred@0178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is successor")) [score=10.214, prob=0.001]
                Pred@0179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is multiply")) [score=10.212, prob=0.001]
                Pred@0180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is zero")) [score=10.210, prob=0.001]
                Pred@0181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is half")) [score=10.209, prob=0.001]
                Pred@0182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is successor")) [score=10.203, prob=0.001]
                Pred@0183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose domain is numbers")) [score=10.203, prob=0.001]
                Pred@0184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is none")) [score=10.190, prob=0.001]
                Pred@0185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is successor")) [score=10.190, prob=0.001]
                Pred@0186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is power")) [score=10.189, prob=0.001]
                Pred@0187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is square")) [score=10.188, prob=0.001]
                Pred@0188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is cast")) [score=10.180, prob=0.001]
                Pred@0189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is double")) [score=10.178, prob=0.001]
                Pred@0190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is square")) [score=10.168, prob=0.001]
                Pred@0191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is cast")) [score=10.166, prob=0.001]
                Pred@0192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is successor")) [score=10.157, prob=0.001]
                Pred@0193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is successor")) [score=10.154, prob=0.001]
                Pred@0194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose domain is numbers")) [score=10.148, prob=0.001]
                Pred@0195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is none")) [score=10.148, prob=0.001]
                Pred@0196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is successor")) [score=10.146, prob=0.001]
                Pred@0197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is divide")) [score=10.146, prob=0.001]
                Pred@0198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is square")) [score=10.145, prob=0.001]
                Pred@0199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is simplify")) [score=10.144, prob=0.001]
                Pred@0200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose secondary operator is half")) [score=10.143, prob=0.001]
                Pred@0201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is square")) [score=10.136, prob=0.001]
                Pred@0202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is convert")) [score=10.132, prob=0.001]
                Pred@0203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is power")) [score=10.129, prob=0.001]
                Pred@0204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is cast")) [score=10.117, prob=0.001]
                Pred@0205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is convert")) [score=10.116, prob=0.001]
                Pred@0206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is none")) [score=10.111, prob=0.001]
                Pred@0207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is distribute")) [score=10.108, prob=0.001]
                Pred@0208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is cast")) [score=10.107, prob=0.001]
                Pred@0209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is distribute")) [score=10.107, prob=0.001]
                Pred@0210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is square")) [score=10.106, prob=0.001]
                Pred@0211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is none")) [score=10.100, prob=0.001]
                Pred@0212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is divide")) [score=10.092, prob=0.001]
                Pred@0213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is add")) [score=10.089, prob=0.001]
                Pred@0214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is distribute")) [score=10.086, prob=0.001]
                Pred@0215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose domain is the reals")) [score=10.085, prob=0.001]
                Pred@0216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is add")) [score=10.084, prob=0.001]
                Pred@0217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is add")) [score=10.083, prob=0.001]
                Pred@0218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose domain is the reals")) [score=10.079, prob=0.001]
                Pred@0219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is none")) [score=10.072, prob=0.001]
                Pred@0220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is power")) [score=10.071, prob=0.001]
                Pred@0221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is simplify")) [score=10.069, prob=0.001]
                Pred@0222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is none")) [score=10.062, prob=0.001]
                Pred@0223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is expand")) [score=10.060, prob=0.001]
                Pred@0224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is simplify")) [score=10.060, prob=0.001]
                Pred@0225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is square")) [score=10.059, prob=0.001]
                Pred@0226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is multiply")) [score=10.058, prob=0.001]
                Pred@0227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is compute")) [score=10.054, prob=0.001]
                Pred@0228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is none")) [score=10.052, prob=0.001]
                Pred@0229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose domain is the reals")) [score=10.045, prob=0.001]
                Pred@0230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is square")) [score=10.044, prob=0.001]
                Pred@0231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose domain is numbers")) [score=10.043, prob=0.001]
                Pred@0232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is power")) [score=10.042, prob=0.001]
                Pred@0233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is divide")) [score=10.042, prob=0.001]
                Pred@0234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is square")) [score=10.039, prob=0.001]
                Pred@0235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is power")) [score=10.029, prob=0.001]
                Pred@0236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is cast")) [score=10.026, prob=0.001]
                Pred@0237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose domain is the reals")) [score=10.021, prob=0.001]
                Pred@0238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is introduce")) [score=10.018, prob=0.001]
                Pred@0239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is successor")) [score=10.018, prob=0.001]
                Pred@0240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is successor")) [score=10.012, prob=0.001]
                Pred@0241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is divide")) [score=10.011, prob=0.001]
                Pred@0242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is simplify")) [score=10.011, prob=0.001]
                Pred@0243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is square")) [score=10.009, prob=0.001]
                Pred@0244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is symmetry")) [score=10.007, prob=0.001]
                Pred@0245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is divide")) [score=10.007, prob=0.001]
                Pred@0246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is square")) [score=10.002, prob=0.001]
                Pred@0247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose domain is the reals")) [score=10.000, prob=0.001]
                Pred@0248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is introduce")) [score=9.999, prob=0.001]
                Pred@0249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is square")) [score=9.999, prob=0.001]
                Pred@0250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is zero")) [score=9.998, prob=0.001]
                Pred@0251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is divide")) [score=9.994, prob=0.001]
                Pred@0252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is symmetry")) [score=9.994, prob=0.001]
                Pred@0253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is compute")) [score=9.989, prob=0.001]
                Pred@0254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is cast")) [score=9.987, prob=0.001]
                Pred@0255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose domain is the reals")) [score=9.982, prob=0.001]
                Pred@0256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is zero")) [score=9.981, prob=0.001]
                Pred@0257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is cast")) [score=9.980, prob=0.001]
                Pred@0258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is square")) [score=9.975, prob=0.001]
                Pred@0259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is half")) [score=9.973, prob=0.001]
                Pred@0260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose domain is numbers")) [score=9.971, prob=0.001]
                Pred@0261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is cast")) [score=9.967, prob=0.001]
                Pred@0262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is zero")) [score=9.965, prob=0.001]
                Pred@0263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is cast")) [score=9.962, prob=0.001]
                Pred@0264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is add")) [score=9.960, prob=0.001]
                Pred@0265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is add")) [score=9.959, prob=0.001]
                Pred@0266: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is none")) [score=9.958, prob=0.001]
                Pred@0267: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is divide")) [score=9.955, prob=0.001]
                Pred@0268: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is successor")) [score=9.955, prob=0.001]
                Pred@0269: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is half")) [score=9.953, prob=0.001]
                Pred@0270: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is add")) [score=9.953, prob=0.001]
                Pred@0271: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is divide")) [score=9.951, prob=0.001]
                Pred@0272: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is zero")) [score=9.943, prob=0.001]
                Pred@0273: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose secondary operator is add")) [score=9.942, prob=0.001]
                Pred@0274: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is introduce")) [score=9.940, prob=0.001]
                Pred@0275: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is symmetry")) [score=9.939, prob=0.001]
                Pred@0276: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is compute")) [score=9.937, prob=0.001]
                Pred@0277: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is successor")) [score=9.934, prob=0.001]
                Pred@0278: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is add")) [score=9.933, prob=0.001]
                Pred@0279: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is introduce")) [score=9.933, prob=0.001]
                Pred@0280: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is distribute")) [score=9.926, prob=0.001]
                Pred@0281: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is convert")) [score=9.926, prob=0.001]
                Pred@0282: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is square")) [score=9.919, prob=0.001]
                Pred@0283: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is add")) [score=9.919, prob=0.001]
                Pred@0284: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose domain is the reals")) [score=9.916, prob=0.001]
                Pred@0285: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is none")) [score=9.915, prob=0.001]
                Pred@0286: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose domain is numbers")) [score=9.914, prob=0.001]
                Pred@0287: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is multiply")) [score=9.913, prob=0.001]
                Pred@0288: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is divide")) [score=9.906, prob=9.99e-04]
                Pred@0289: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose domain is the reals")) [score=9.904, prob=9.97e-04]
                Pred@0290: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is zero")) [score=9.903, prob=9.96e-04]
                Pred@0291: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is divide")) [score=9.894, prob=9.87e-04]
                Pred@0292: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is distribute")) [score=9.893, prob=9.86e-04]
                Pred@0293: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is add")) [score=9.892, prob=9.85e-04]
                Pred@0294: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is square")) [score=9.886, prob=9.79e-04]
                Pred@0295: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is successor")) [score=9.883, prob=9.77e-04]
                Pred@0296: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose domain is numbers")) [score=9.877, prob=9.71e-04]
                Pred@0297: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is multiply")) [score=9.875, prob=9.68e-04]
                Pred@0298: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is symmetry")) [score=9.870, prob=9.64e-04]
                Pred@0299: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is distribute")) [score=9.868, prob=9.62e-04]
                Pred@0300: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is successor")) [score=9.865, prob=9.59e-04]
                Pred@0301: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is square")) [score=9.861, prob=9.55e-04]
                Pred@0302: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is cast")) [score=9.858, prob=9.52e-04]
                Pred@0303: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is add")) [score=9.857, prob=9.51e-04]
                Pred@0304: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is none")) [score=9.856, prob=9.50e-04]
                Pred@0305: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is successor")) [score=9.855, prob=9.50e-04]
                Pred@0306: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is divide")) [score=9.855, prob=9.49e-04]
                Pred@0307: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is distribute")) [score=9.849, prob=9.43e-04]
                Pred@0308: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is divide")) [score=9.847, prob=9.41e-04]
                Pred@0309: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is factorize")) [score=9.840, prob=9.35e-04]
                Pred@0310: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is symmetry")) [score=9.838, prob=9.34e-04]
                Pred@0311: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is square")) [score=9.838, prob=9.33e-04]
                Pred@0312: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is none")) [score=9.837, prob=9.32e-04]
                Pred@0313: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is multiply")) [score=9.831, prob=9.27e-04]
                Pred@0314: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is square")) [score=9.827, prob=9.23e-04]
                Pred@0315: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is add")) [score=9.824, prob=9.20e-04]
                Pred@0316: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is zero")) [score=9.822, prob=9.18e-04]
                Pred@0317: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is successor")) [score=9.818, prob=9.15e-04]
                Pred@0318: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is divide")) [score=9.816, prob=9.13e-04]
                Pred@0319: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is convert")) [score=9.815, prob=9.12e-04]
                Pred@0320: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is half")) [score=9.815, prob=9.12e-04]
                Pred@0321: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is successor")) [score=9.814, prob=9.11e-04]
                Pred@0322: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose domain is the reals")) [score=9.794, prob=8.93e-04]
                Pred@0323: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is introduce")) [score=9.789, prob=8.89e-04]
                Pred@0324: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is compute")) [score=9.786, prob=8.86e-04]
                Pred@0325: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is cast")) [score=9.782, prob=8.83e-04]
                Pred@0326: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is add")) [score=9.781, prob=8.82e-04]
                Pred@0327: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is multiply")) [score=9.777, prob=8.78e-04]
                Pred@0328: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is eliminate")) [score=9.774, prob=8.76e-04]
                Pred@0329: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is none")) [score=9.768, prob=8.71e-04]
                Pred@0330: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is convert")) [score=9.767, prob=8.70e-04]
                Pred@0331: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is multiply")) [score=9.761, prob=8.64e-04]
                Pred@0332: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is dissociate")) [score=9.761, prob=8.64e-04]
                Pred@0333: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is cast")) [score=9.761, prob=8.64e-04]
                Pred@0334: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is add")) [score=9.756, prob=8.60e-04]
                Pred@0335: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is half")) [score=9.755, prob=8.59e-04]
                Pred@0336: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is successor")) [score=9.754, prob=8.58e-04]
                Pred@0337: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is multiply")) [score=9.752, prob=8.56e-04]
                Pred@0338: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is divide")) [score=9.745, prob=8.50e-04]
                Pred@0339: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is power")) [score=9.739, prob=8.46e-04]
                Pred@0340: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is zero")) [score=9.737, prob=8.43e-04]
                Pred@0341: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is rotate")) [score=9.736, prob=8.43e-04]
                Pred@0342: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is power")) [score=9.733, prob=8.41e-04]
                Pred@0343: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is half")) [score=9.732, prob=8.40e-04]
                Pred@0344: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is successor")) [score=9.730, prob=8.38e-04]
                Pred@0345: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is split")) [score=9.729, prob=8.37e-04]
                Pred@0346: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is simplify")) [score=9.727, prob=8.35e-04]
                Pred@0347: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is double")) [score=9.723, prob=8.32e-04]
                Pred@0348: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is split")) [score=9.713, prob=8.23e-04]
                Pred@0349: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose domain is the reals")) [score=9.708, prob=8.19e-04]
                Pred@0350: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is factorize")) [score=9.704, prob=8.16e-04]
                Pred@0351: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is power")) [score=9.701, prob=8.14e-04]
                Pred@0352: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is split")) [score=9.698, prob=8.11e-04]
                Pred@0353: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is multiply")) [score=9.693, prob=8.07e-04]
                Pred@0354: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is compute")) [score=9.685, prob=8.01e-04]
                Pred@0355: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is divide")) [score=9.684, prob=8.00e-04]
                Pred@0356: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is half")) [score=9.684, prob=8.00e-04]
                Pred@0357: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is rotate")) [score=9.680, prob=7.97e-04]
                Pred@0358: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is add")) [score=9.679, prob=7.96e-04]
                Pred@0359: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is add")) [score=9.678, prob=7.95e-04]
                Pred@0360: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is successor")) [score=9.677, prob=7.95e-04]
                Pred@0361: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is power")) [score=9.674, prob=7.92e-04]
                Pred@0362: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is successor")) [score=9.668, prob=7.87e-04]
                Pred@0363: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is square")) [score=9.667, prob=7.87e-04]
                Pred@0364: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is half")) [score=9.663, prob=7.84e-04]
                Pred@0365: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is add")) [score=9.660, prob=7.81e-04]
                Pred@0366: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is multiply")) [score=9.657, prob=7.79e-04]
                Pred@0367: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is none")) [score=9.652, prob=7.75e-04]
                Pred@0368: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose domain is the reals")) [score=9.650, prob=7.73e-04]
                Pred@0369: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is half")) [score=9.650, prob=7.73e-04]
                Pred@0370: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is divide")) [score=9.649, prob=7.72e-04]
                Pred@0371: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose domain is numbers")) [score=9.648, prob=7.72e-04]
                Pred@0372: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is distribute")) [score=9.647, prob=7.71e-04]
                Pred@0373: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is square")) [score=9.644, prob=7.69e-04]
                Pred@0374: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose domain is the reals")) [score=9.642, prob=7.68e-04]
                Pred@0375: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose domain is numbers")) [score=9.642, prob=7.67e-04]
                Pred@0376: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is half")) [score=9.641, prob=7.67e-04]
                Pred@0377: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is power")) [score=9.641, prob=7.67e-04]
                Pred@0378: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is split")) [score=9.639, prob=7.65e-04]
                Pred@0379: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is convert")) [score=9.634, prob=7.61e-04]
                Pred@0380: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose secondary operator is half")) [score=9.632, prob=7.60e-04]
                Pred@0381: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is power")) [score=9.628, prob=7.57e-04]
                Pred@0382: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is dissociate")) [score=9.628, prob=7.57e-04]
                Pred@0383: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is none")) [score=9.622, prob=7.52e-04]
                Pred@0384: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is none")) [score=9.619, prob=7.50e-04]
                Pred@0385: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is square")) [score=9.619, prob=7.50e-04]
                Pred@0386: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is zero")) [score=9.618, prob=7.49e-04]
                Pred@0387: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is power")) [score=9.613, prob=7.45e-04]
                Pred@0388: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is zero")) [score=9.608, prob=7.41e-04]
                Pred@0389: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is distribute")) [score=9.605, prob=7.39e-04]
                Pred@0390: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is split")) [score=9.595, prob=7.32e-04]
                Pred@0391: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is expand")) [score=9.593, prob=7.31e-04]
                Pred@0392: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose secondary operator is multiply")) [score=9.585, prob=7.25e-04]
                Pred@0393: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is square")) [score=9.585, prob=7.24e-04]
                Pred@0394: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is power")) [score=9.583, prob=7.23e-04]
                Pred@0395: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose domain is numbers")) [score=9.583, prob=7.23e-04]
                Pred@0396: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose domain is numbers")) [score=9.583, prob=7.23e-04]
                Pred@0397: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is successor")) [score=9.582, prob=7.23e-04]
                Pred@0398: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is successor")) [score=9.580, prob=7.21e-04]
                Pred@0399: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is expand")) [score=9.580, prob=7.21e-04]
                Pred@0400: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is symmetry")) [score=9.580, prob=7.21e-04]
                Pred@0401: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is cast")) [score=9.578, prob=7.20e-04]
                Pred@0402: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is divide")) [score=9.577, prob=7.19e-04]
                Pred@0403: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is power")) [score=9.577, prob=7.19e-04]
                Pred@0404: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is divide")) [score=9.576, prob=7.18e-04]
                Pred@0405: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is simplify")) [score=9.576, prob=7.18e-04]
                Pred@0406: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is square")) [score=9.574, prob=7.17e-04]
                Pred@0407: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is add")) [score=9.571, prob=7.15e-04]
                Pred@0408: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is double")) [score=9.568, prob=7.13e-04]
                Pred@0409: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is associate")) [score=9.567, prob=7.12e-04]
                Pred@0410: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose domain is the reals")) [score=9.566, prob=7.11e-04]
                Pred@0411: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is multiply")) [score=9.566, prob=7.11e-04]
                Pred@0412: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is add")) [score=9.564, prob=7.10e-04]
                Pred@0413: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is factorize")) [score=9.560, prob=7.07e-04]
                Pred@0414: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is successor")) [score=9.552, prob=7.01e-04]
                Pred@0415: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is none")) [score=9.550, prob=7.00e-04]
                Pred@0416: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is divide")) [score=9.549, prob=6.99e-04]
                Pred@0417: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is expand")) [score=9.548, prob=6.98e-04]
                Pred@0418: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is zero")) [score=9.546, prob=6.97e-04]
                Pred@0419: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is add")) [score=9.541, prob=6.93e-04]
                Pred@0420: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is add")) [score=9.540, prob=6.93e-04]
                Pred@0421: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is simplify")) [score=9.538, prob=6.92e-04]
                Pred@0422: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is expand")) [score=9.535, prob=6.89e-04]
                Pred@0423: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is compute")) [score=9.534, prob=6.88e-04]
                Pred@0424: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is successor")) [score=9.531, prob=6.87e-04]
                Pred@0425: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is factorize")) [score=9.528, prob=6.85e-04]
                Pred@0426: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is convert")) [score=9.525, prob=6.83e-04]
                Pred@0427: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is divide")) [score=9.524, prob=6.82e-04]
                Pred@0428: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is multiply")) [score=9.524, prob=6.82e-04]
                Pred@0429: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is cast")) [score=9.523, prob=6.81e-04]
                Pred@0430: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose domain is numbers")) [score=9.523, prob=6.81e-04]
                Pred@0431: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is successor")) [score=9.521, prob=6.80e-04]
                Pred@0432: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is convert")) [score=9.514, prob=6.75e-04]
                Pred@0433: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is half")) [score=9.514, prob=6.75e-04]
                Pred@0434: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose secondary operator is multiply")) [score=9.512, prob=6.74e-04]
                Pred@0435: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is cast")) [score=9.510, prob=6.72e-04]
                Pred@0436: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is convert")) [score=9.508, prob=6.71e-04]
                Pred@0437: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is power")) [score=9.508, prob=6.71e-04]
                Pred@0438: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is none")) [score=9.504, prob=6.68e-04]
                Pred@0439: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is multiply")) [score=9.502, prob=6.67e-04]
                Pred@0440: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is convert")) [score=9.500, prob=6.65e-04]
                Pred@0441: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is half")) [score=9.499, prob=6.65e-04]
                Pred@0442: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is square")) [score=9.495, prob=6.62e-04]
                Pred@0443: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is double")) [score=9.493, prob=6.61e-04]
                Pred@0444: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose domain is the reals")) [score=9.492, prob=6.61e-04]
                Pred@0445: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is successor")) [score=9.490, prob=6.59e-04]
                Pred@0446: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is expand")) [score=9.482, prob=6.54e-04]
                Pred@0447: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is factorize")) [score=9.479, prob=6.52e-04]
                Pred@0448: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is divide")) [score=9.478, prob=6.51e-04]
                Pred@0449: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is none")) [score=9.476, prob=6.50e-04]
                Pred@0450: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is add")) [score=9.476, prob=6.50e-04]
                Pred@0451: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is cast")) [score=9.475, prob=6.49e-04]
                Pred@0452: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is cast")) [score=9.473, prob=6.48e-04]
                Pred@0453: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is multiply")) [score=9.471, prob=6.46e-04]
                Pred@0454: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is power")) [score=9.470, prob=6.46e-04]
                Pred@0455: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is simplify")) [score=9.469, prob=6.45e-04]
                Pred@0456: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is power")) [score=9.468, prob=6.44e-04]
                Pred@0457: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is dissociate")) [score=9.465, prob=6.43e-04]
                Pred@0458: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is cast")) [score=9.461, prob=6.40e-04]
                Pred@0459: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose domain is numbers")) [score=9.459, prob=6.39e-04]
                Pred@0460: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose domain is numbers")) [score=9.455, prob=6.36e-04]
                Pred@0461: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is multiply")) [score=9.449, prob=6.33e-04]
                Pred@0462: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose domain is numbers")) [score=9.448, prob=6.32e-04]
                Pred@0463: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is half")) [score=9.447, prob=6.32e-04]
                Pred@0464: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is distribute")) [score=9.447, prob=6.32e-04]
                Pred@0465: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is power")) [score=9.447, prob=6.31e-04]
                Pred@0466: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is divide")) [score=9.444, prob=6.29e-04]
                Pred@0467: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is compute")) [score=9.439, prob=6.26e-04]
                Pred@0468: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is square")) [score=9.436, prob=6.25e-04]
                Pred@0469: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is half")) [score=9.433, prob=6.23e-04]
                Pred@0470: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is add")) [score=9.433, prob=6.22e-04]
                Pred@0471: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is divide")) [score=9.431, prob=6.21e-04]
                Pred@0472: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is compute")) [score=9.428, prob=6.20e-04]
                Pred@0473: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is multiply")) [score=9.423, prob=6.16e-04]
                Pred@0474: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is distribute")) [score=9.419, prob=6.14e-04]
                Pred@0475: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is eliminate")) [score=9.416, prob=6.12e-04]
                Pred@0476: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is none")) [score=9.416, prob=6.12e-04]
                Pred@0477: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is add")) [score=9.415, prob=6.11e-04]
                Pred@0478: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is eliminate")) [score=9.406, prob=6.06e-04]
                Pred@0479: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is convert")) [score=9.405, prob=6.05e-04]
                Pred@0480: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is divide")) [score=9.405, prob=6.05e-04]
                Pred@0481: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is half")) [score=9.403, prob=6.04e-04]
                Pred@0482: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is zero")) [score=9.400, prob=6.02e-04]
                Pred@0483: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is square")) [score=9.399, prob=6.02e-04]
                Pred@0484: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is eliminate")) [score=9.397, prob=6.00e-04]
                Pred@0485: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is cast")) [score=9.396, prob=6.00e-04]
                Pred@0486: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is none")) [score=9.395, prob=5.99e-04]
                Pred@0487: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose domain is numbers")) [score=9.395, prob=5.99e-04]
                Pred@0488: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is multiply")) [score=9.394, prob=5.99e-04]
                Pred@0489: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose domain is numbers")) [score=9.389, prob=5.96e-04]
                Pred@0490: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is add")) [score=9.389, prob=5.96e-04]
                Pred@0491: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is square")) [score=9.388, prob=5.95e-04]
                Pred@0492: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose effect is eliminate")) [score=9.386, prob=5.94e-04]
                Pred@0493: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is simplify")) [score=9.384, prob=5.93e-04]
                Pred@0494: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is half")) [score=9.380, prob=5.91e-04]
                Pred@0495: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is cast")) [score=9.379, prob=5.90e-04]
                Pred@0496: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is distribute")) [score=9.379, prob=5.90e-04]
                Pred@0497: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is successor")) [score=9.376, prob=5.88e-04]
                Pred@0498: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is divide")) [score=9.374, prob=5.87e-04]
                Pred@0499: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is divide")) [score=9.372, prob=5.86e-04]
                Pred@0500: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is none")) [score=9.366, prob=5.82e-04]
                Pred@0501: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is symmetry")) [score=9.365, prob=5.82e-04]
                Pred@0502: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is cast")) [score=9.360, prob=5.79e-04]
                Pred@0503: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose domain is the reals")) [score=9.354, prob=5.75e-04]
                Pred@0504: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose secondary operator is none")) [score=9.352, prob=5.74e-04]
                Pred@0505: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is half")) [score=9.352, prob=5.74e-04]
                Pred@0506: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is cast")) [score=9.351, prob=5.74e-04]
                Pred@0507: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is none")) [score=9.347, prob=5.71e-04]
                Pred@0508: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is divide")) [score=9.345, prob=5.70e-04]
                Pred@0509: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is divide")) [score=9.338, prob=5.66e-04]
                Pred@0510: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is square")) [score=9.338, prob=5.66e-04]
                Pred@0511: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is half")) [score=9.335, prob=5.64e-04]
                Pred@0512: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is divide")) [score=9.328, prob=5.60e-04]
                Pred@0513: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is add")) [score=9.323, prob=5.58e-04]
                Pred@0514: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is successor")) [score=9.323, prob=5.58e-04]
                Pred@0515: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is double")) [score=9.322, prob=5.57e-04]
                Pred@0516: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is multiply")) [score=9.322, prob=5.57e-04]
                Pred@0517: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is rotate")) [score=9.322, prob=5.57e-04]
                Pred@0518: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is divide")) [score=9.319, prob=5.55e-04]
                Pred@0519: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is compute")) [score=9.318, prob=5.55e-04]
                Pred@0520: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is simplify")) [score=9.317, prob=5.54e-04]
                Pred@0521: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is introduce")) [score=9.316, prob=5.54e-04]
                Pred@0522: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is associate")) [score=9.314, prob=5.53e-04]
                Pred@0523: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is square")) [score=9.313, prob=5.52e-04]
                Pred@0524: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is cast")) [score=9.310, prob=5.50e-04]
                Pred@0525: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is cast")) [score=9.306, prob=5.48e-04]
                Pred@0526: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is multiply")) [score=9.303, prob=5.47e-04]
                Pred@0527: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose domain is numbers")) [score=9.303, prob=5.47e-04]
                Pred@0528: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is half")) [score=9.300, prob=5.45e-04]
                Pred@0529: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is associate")) [score=9.299, prob=5.45e-04]
                Pred@0530: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is add")) [score=9.297, prob=5.43e-04]
                Pred@0531: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is multiply")) [score=9.296, prob=5.43e-04]
                Pred@0532: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose secondary operator is half")) [score=9.292, prob=5.41e-04]
                Pred@0533: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is successor")) [score=9.290, prob=5.40e-04]
                Pred@0534: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is cast")) [score=9.290, prob=5.39e-04]
                Pred@0535: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose secondary operator is half")) [score=9.289, prob=5.39e-04]
                Pred@0536: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is factorize")) [score=9.288, prob=5.39e-04]
                Pred@0537: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is power")) [score=9.284, prob=5.36e-04]
                Pred@0538: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose secondary operator is half")) [score=9.283, prob=5.36e-04]
                Pred@0539: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is successor")) [score=9.279, prob=5.34e-04]
                Pred@0540: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is double")) [score=9.276, prob=5.32e-04]
                Pred@0541: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is add")) [score=9.272, prob=5.30e-04]
                Pred@0542: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is factorize")) [score=9.270, prob=5.29e-04]
                Pred@0543: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is half")) [score=9.267, prob=5.27e-04]
                Pred@0544: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose domain is the reals")) [score=9.264, prob=5.26e-04]
                Pred@0545: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is associate")) [score=9.262, prob=5.25e-04]
                Pred@0546: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is cast")) [score=9.261, prob=5.24e-04]
                Pred@0547: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is split")) [score=9.260, prob=5.24e-04]
                Pred@0548: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is associate")) [score=9.260, prob=5.23e-04]
                Pred@0549: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is cast")) [score=9.258, prob=5.23e-04]
                Pred@0550: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is compute")) [score=9.256, prob=5.22e-04]
                Pred@0551: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is eliminate")) [score=9.253, prob=5.20e-04]
                Pred@0552: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is multiply")) [score=9.253, prob=5.20e-04]
                Pred@0553: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is double")) [score=9.251, prob=5.19e-04]
                Pred@0554: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is power")) [score=9.251, prob=5.19e-04]
                Pred@0555: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is square")) [score=9.250, prob=5.18e-04]
                Pred@0556: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is half")) [score=9.245, prob=5.16e-04]
                Pred@0557: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is add")) [score=9.243, prob=5.15e-04]
                Pred@0558: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is distribute")) [score=9.243, prob=5.15e-04]
                Pred@0559: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is compute")) [score=9.242, prob=5.14e-04]
                Pred@0560: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is associate")) [score=9.241, prob=5.14e-04]
                Pred@0561: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is associate")) [score=9.241, prob=5.14e-04]
                Pred@0562: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is successor")) [score=9.238, prob=5.12e-04]
                Pred@0563: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is cast")) [score=9.237, prob=5.12e-04]
                Pred@0564: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is symmetry")) [score=9.236, prob=5.11e-04]
                Pred@0565: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is add")) [score=9.235, prob=5.11e-04]
                Pred@0566: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is add")) [score=9.234, prob=5.10e-04]
                Pred@0567: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is square")) [score=9.234, prob=5.10e-04]
                Pred@0568: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is compute")) [score=9.230, prob=5.08e-04]
                Pred@0569: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is factorize")) [score=9.230, prob=5.08e-04]
                Pred@0570: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is associate")) [score=9.230, prob=5.08e-04]
                Pred@0571: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is add")) [score=9.229, prob=5.07e-04]
                Pred@0572: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is symmetry")) [score=9.228, prob=5.07e-04]
                Pred@0573: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose domain is the reals")) [score=9.223, prob=5.05e-04]
                Pred@0574: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is associate")) [score=9.223, prob=5.05e-04]
                Pred@0575: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is half")) [score=9.222, prob=5.04e-04]
                Pred@0576: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is cast")) [score=9.222, prob=5.04e-04]
                Pred@0577: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is compute")) [score=9.221, prob=5.04e-04]
                Pred@0578: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is half")) [score=9.221, prob=5.03e-04]
                Pred@0579: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is divide")) [score=9.216, prob=5.01e-04]
                Pred@0580: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is square")) [score=9.216, prob=5.01e-04]
                Pred@0581: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is square")) [score=9.212, prob=4.99e-04]
                Pred@0582: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is multiply")) [score=9.208, prob=4.97e-04]
                Pred@0583: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is simplify")) [score=9.207, prob=4.97e-04]
                Pred@0584: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is successor")) [score=9.201, prob=4.94e-04]
                Pred@0585: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is none")) [score=9.201, prob=4.94e-04]
                Pred@0586: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is square")) [score=9.200, prob=4.93e-04]
                Pred@0587: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is add")) [score=9.192, prob=4.89e-04]
                Pred@0588: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is add")) [score=9.188, prob=4.87e-04]
                Pred@0589: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is factorize")) [score=9.184, prob=4.85e-04]
                Pred@0590: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is convert")) [score=9.181, prob=4.84e-04]
                Pred@0591: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is double")) [score=9.177, prob=4.82e-04]
                Pred@0592: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is square")) [score=9.175, prob=4.81e-04]
                Pred@0593: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is rotate")) [score=9.170, prob=4.78e-04]
                Pred@0594: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is divide")) [score=9.169, prob=4.78e-04]
                Pred@0595: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is power")) [score=9.167, prob=4.77e-04]
                Pred@0596: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is square")) [score=9.167, prob=4.77e-04]
                Pred@0597: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is none")) [score=9.166, prob=4.77e-04]
                Pred@0598: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is cast")) [score=9.165, prob=4.76e-04]
                Pred@0599: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is expand")) [score=9.165, prob=4.76e-04]
                Pred@0600: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is half")) [score=9.164, prob=4.76e-04]
                Pred@0601: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is multiply")) [score=9.160, prob=4.74e-04]
                Pred@0602: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is compute")) [score=9.156, prob=4.72e-04]
                Pred@0603: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is compute")) [score=9.156, prob=4.72e-04]
                Pred@0604: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is eliminate")) [score=9.155, prob=4.72e-04]
                Pred@0605: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is double")) [score=9.155, prob=4.71e-04]
                Pred@0606: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is double")) [score=9.154, prob=4.71e-04]
                Pred@0607: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is introduce")) [score=9.152, prob=4.70e-04]
                Pred@0608: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is power")) [score=9.151, prob=4.70e-04]
                Pred@0609: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is simplify")) [score=9.148, prob=4.68e-04]
                Pred@0610: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is cast")) [score=9.147, prob=4.67e-04]
                Pred@0611: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is zero")) [score=9.146, prob=4.67e-04]
                Pred@0612: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is cast")) [score=9.141, prob=4.65e-04]
                Pred@0613: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is simplify")) [score=9.140, prob=4.65e-04]
                Pred@0614: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose secondary operator is add")) [score=9.140, prob=4.64e-04]
                Pred@0615: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is divide")) [score=9.136, prob=4.63e-04]
                Pred@0616: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is half")) [score=9.133, prob=4.61e-04]
                Pred@0617: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is convert")) [score=9.130, prob=4.60e-04]
                Pred@0618: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is factorize")) [score=9.125, prob=4.57e-04]
                Pred@0619: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose domain is the reals")) [score=9.121, prob=4.56e-04]
                Pred@0620: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is eliminate")) [score=9.121, prob=4.56e-04]
                Pred@0621: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is power")) [score=9.119, prob=4.55e-04]
                Pred@0622: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is divide")) [score=9.118, prob=4.54e-04]
                Pred@0623: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is half")) [score=9.118, prob=4.54e-04]
                Pred@0624: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is cast")) [score=9.117, prob=4.54e-04]
                Pred@0625: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is dissociate")) [score=9.114, prob=4.52e-04]
                Pred@0626: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is symmetry")) [score=9.113, prob=4.52e-04]
                Pred@0627: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is double")) [score=9.113, prob=4.52e-04]
                Pred@0628: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is add")) [score=9.110, prob=4.51e-04]
                Pred@0629: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is compute")) [score=9.108, prob=4.50e-04]
                Pred@0630: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is simplify")) [score=9.106, prob=4.49e-04]
                Pred@0631: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is power")) [score=9.101, prob=4.47e-04]
                Pred@0632: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is distribute")) [score=9.101, prob=4.47e-04]
                Pred@0633: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is split")) [score=9.098, prob=4.45e-04]
                Pred@0634: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is none")) [score=9.098, prob=4.45e-04]
                Pred@0635: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is rotate")) [score=9.096, prob=4.45e-04]
                Pred@0636: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers and whose main operator is half")) [score=9.091, prob=4.42e-04]
                Pred@0637: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is half")) [score=9.091, prob=4.42e-04]
                Pred@0638: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose domain is numbers")) [score=9.088, prob=4.41e-04]
                Pred@0639: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is divide")) [score=9.087, prob=4.40e-04]
                Pred@0640: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is divide")) [score=9.086, prob=4.40e-04]
                Pred@0641: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is power")) [score=9.086, prob=4.40e-04]
                Pred@0642: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is cast")) [score=9.086, prob=4.40e-04]
                Pred@0643: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is rotate")) [score=9.083, prob=4.39e-04]
                Pred@0644: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is power")) [score=9.079, prob=4.37e-04]
                Pred@0645: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is factorize")) [score=9.078, prob=4.37e-04]
                Pred@0646: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose main operator is multiply")) [score=9.078, prob=4.37e-04]
                Pred@0647: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is divide")) [score=9.077, prob=4.36e-04]
                Pred@0648: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is add")) [score=9.071, prob=4.34e-04]
                Pred@0649: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is associate")) [score=9.067, prob=4.32e-04]
                Pred@0650: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is successor")) [score=9.064, prob=4.30e-04]
                Pred@0651: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is eliminate")) [score=9.063, prob=4.30e-04]
                Pred@0652: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is compute")) [score=9.056, prob=4.27e-04]
                Pred@0653: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is none")) [score=9.056, prob=4.27e-04]
                Pred@0654: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is none")) [score=9.050, prob=4.24e-04]
                Pred@0655: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is half")) [score=9.048, prob=4.24e-04]
                Pred@0656: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is distribute")) [score=9.048, prob=4.24e-04]
                Pred@0657: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is add")) [score=9.047, prob=4.23e-04]
                Pred@0658: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is simplify")) [score=9.045, prob=4.22e-04]
                Pred@0659: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is split")) [score=9.043, prob=4.21e-04]
                Pred@0660: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is half")) [score=9.040, prob=4.20e-04]
                Pred@0661: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is half")) [score=9.038, prob=4.19e-04]
                Pred@0662: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is double")) [score=9.034, prob=4.18e-04]
                Pred@0663: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose secondary operator is half")) [score=9.032, prob=4.17e-04]
                Pred@0664: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is eliminate")) [score=9.031, prob=4.17e-04]
                Pred@0665: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is power")) [score=9.031, prob=4.16e-04]
                Pred@0666: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is successor")) [score=9.028, prob=4.15e-04]
                Pred@0667: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is square")) [score=9.027, prob=4.15e-04]
                Pred@0668: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is power")) [score=9.027, prob=4.15e-04]
                Pred@0669: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose domain is the reals")) [score=9.023, prob=4.13e-04]
                Pred@0670: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is eliminate")) [score=9.021, prob=4.12e-04]
                Pred@0671: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose domain is numbers")) [score=9.020, prob=4.12e-04]
                Pred@0672: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is convert")) [score=9.020, prob=4.12e-04]
                Pred@0673: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is cast")) [score=9.019, prob=4.11e-04]
                Pred@0674: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is successor")) [score=9.015, prob=4.10e-04]
                Pred@0675: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is eliminate")) [score=9.013, prob=4.09e-04]
                Pred@0676: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is eliminate")) [score=9.012, prob=4.09e-04]
                Pred@0677: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is add")) [score=9.011, prob=4.08e-04]
                Pred@0678: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is factorize")) [score=9.011, prob=4.08e-04]
                Pred@0679: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is symmetry")) [score=9.009, prob=4.07e-04]
                Pred@0680: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose secondary operator is multiply")) [score=9.008, prob=4.07e-04]
                Pred@0681: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose secondary operator is half")) [score=9.002, prob=4.04e-04]
                Pred@0682: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is symmetry")) [score=8.994, prob=4.01e-04]
                Pred@0683: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose main operator is power")) [score=8.993, prob=4.01e-04]
                Pred@0684: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is square")) [score=8.988, prob=3.99e-04]
                Pred@0685: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is cast")) [score=8.987, prob=3.99e-04]
                Pred@0686: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is square")) [score=8.987, prob=3.98e-04]
                Pred@0687: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is distribute")) [score=8.985, prob=3.98e-04]
                Pred@0688: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is square")) [score=8.983, prob=3.97e-04]
                Pred@0689: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is square")) [score=8.981, prob=3.96e-04]
                Pred@0690: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is none")) [score=8.977, prob=3.95e-04]
                Pred@0691: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is introduce")) [score=8.976, prob=3.94e-04]
                Pred@0692: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is associate")) [score=8.974, prob=3.93e-04]
                Pred@0693: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is distribute")) [score=8.972, prob=3.93e-04]
                Pred@0694: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is eliminate")) [score=8.966, prob=3.90e-04]
                Pred@0695: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is convert")) [score=8.966, prob=3.90e-04]
                Pred@0696: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is add")) [score=8.964, prob=3.89e-04]
                Pred@0697: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is convert")) [score=8.961, prob=3.88e-04]
                Pred@0698: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is symmetry")) [score=8.957, prob=3.87e-04]
                Pred@0699: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is power")) [score=8.954, prob=3.85e-04]
                Pred@0700: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is convert")) [score=8.950, prob=3.84e-04]
                Pred@0701: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is double")) [score=8.945, prob=3.82e-04]
                Pred@0702: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is divide")) [score=8.945, prob=3.82e-04]
                Pred@0703: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is square")) [score=8.942, prob=3.81e-04]
                Pred@0704: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is dissociate")) [score=8.938, prob=3.80e-04]
                Pred@0705: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is zero")) [score=8.937, prob=3.79e-04]
                Pred@0706: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is square")) [score=8.937, prob=3.79e-04]
                Pred@0707: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose secondary operator is multiply")) [score=8.936, prob=3.79e-04]
                Pred@0708: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is half")) [score=8.932, prob=3.77e-04]
                Pred@0709: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose secondary operator is divide")) [score=8.931, prob=3.77e-04]
                Pred@0710: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is zero")) [score=8.928, prob=3.76e-04]
                Pred@0711: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is distribute")) [score=8.927, prob=3.75e-04]
                Pred@0712: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is add")) [score=8.927, prob=3.75e-04]
                Pred@0713: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose secondary operator is cast")) [score=8.926, prob=3.75e-04]
                Pred@0714: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is add")) [score=8.924, prob=3.74e-04]
                Pred@0715: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is multiply")) [score=8.922, prob=3.73e-04]
                Pred@0716: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is divide")) [score=8.922, prob=3.73e-04]
                Pred@0717: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is eliminate")) [score=8.915, prob=3.71e-04]
                Pred@0718: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is power")) [score=8.914, prob=3.70e-04]
                Pred@0719: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is associate")) [score=8.914, prob=3.70e-04]
                Pred@0720: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is half")) [score=8.914, prob=3.70e-04]
                Pred@0721: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is successor")) [score=8.908, prob=3.68e-04]
                Pred@0722: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is cast")) [score=8.907, prob=3.68e-04]
                Pred@0723: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is introduce")) [score=8.906, prob=3.67e-04]
                Pred@0724: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is divide")) [score=8.904, prob=3.67e-04]
                Pred@0725: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is add")) [score=8.904, prob=3.67e-04]
                Pred@0726: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is zero")) [score=8.903, prob=3.67e-04]
                Pred@0727: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is symmetry")) [score=8.903, prob=3.66e-04]
                Pred@0728: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is add")) [score=8.902, prob=3.66e-04]
                Pred@0729: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is divide")) [score=8.901, prob=3.66e-04]
                Pred@0730: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is successor")) [score=8.898, prob=3.65e-04]
                Pred@0731: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is divide")) [score=8.895, prob=3.64e-04]
                Pred@0732: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose main operator is multiply")) [score=8.894, prob=3.63e-04]
                Pred@0733: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is dissociate")) [score=8.891, prob=3.62e-04]
                Pred@0734: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is divide")) [score=8.890, prob=3.62e-04]
                Pred@0735: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is half")) [score=8.890, prob=3.62e-04]
                Pred@0736: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is power")) [score=8.890, prob=3.62e-04]
                Pred@0737: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is none")) [score=8.889, prob=3.61e-04]
                Pred@0738: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast and whose effect is rotate")) [score=8.888, prob=3.61e-04]
                Pred@0739: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is introduce")) [score=8.886, prob=3.60e-04]
                Pred@0740: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is zero")) [score=8.882, prob=3.59e-04]
                Pred@0741: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is half")) [score=8.881, prob=3.59e-04]
                Pred@0742: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is add")) [score=8.881, prob=3.58e-04]
                Pred@0743: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is split")) [score=8.881, prob=3.58e-04]
                Pred@0744: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is square")) [score=8.880, prob=3.58e-04]
                Pred@0745: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose domain is numbers")) [score=8.878, prob=3.57e-04]
                Pred@0746: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is symmetry")) [score=8.870, prob=3.54e-04]
                Pred@0747: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is expand")) [score=8.867, prob=3.53e-04]
                Pred@0748: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is none")) [score=8.866, prob=3.53e-04]
                Pred@0749: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is distribute")) [score=8.863, prob=3.52e-04]
                Pred@0750: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is none")) [score=8.863, prob=3.52e-04]
                Pred@0751: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose secondary operator is half")) [score=8.857, prob=3.50e-04]
                Pred@0752: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is factorize")) [score=8.855, prob=3.49e-04]
                Pred@0753: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is square")) [score=8.854, prob=3.49e-04]
                Pred@0754: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose secondary operator is half")) [score=8.852, prob=3.48e-04]
                Pred@0755: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is convert")) [score=8.851, prob=3.48e-04]
                Pred@0756: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is divide")) [score=8.847, prob=3.46e-04]
                Pred@0757: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is none")) [score=8.846, prob=3.46e-04]
                Pred@0758: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is introduce")) [score=8.845, prob=3.46e-04]
                Pred@0759: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose secondary operator is half")) [score=8.845, prob=3.46e-04]
                Pred@0760: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is add")) [score=8.843, prob=3.45e-04]
                Pred@0761: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is distribute")) [score=8.842, prob=3.45e-04]
                Pred@0762: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is symmetry")) [score=8.839, prob=3.44e-04]
                Pred@0763: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is divide")) [score=8.839, prob=3.44e-04]
                Pred@0764: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is simplify")) [score=8.837, prob=3.43e-04]
                Pred@0765: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is simplify")) [score=8.826, prob=3.39e-04]
                Pred@0766: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is add")) [score=8.826, prob=3.39e-04]
                Pred@0767: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is zero")) [score=8.824, prob=3.39e-04]
                Pred@0768: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is convert")) [score=8.823, prob=3.38e-04]
                Pred@0769: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is introduce")) [score=8.822, prob=3.38e-04]
                Pred@0770: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is none")) [score=8.818, prob=3.36e-04]
                Pred@0771: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is zero")) [score=8.816, prob=3.36e-04]
                Pred@0772: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is double")) [score=8.815, prob=3.36e-04]
                Pred@0773: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is successor")) [score=8.815, prob=3.35e-04]
                Pred@0774: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is symmetry")) [score=8.813, prob=3.35e-04]
                Pred@0775: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is introduce")) [score=8.811, prob=3.34e-04]
                Pred@0776: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is none")) [score=8.808, prob=3.33e-04]
                Pred@0777: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is introduce")) [score=8.807, prob=3.33e-04]
                Pred@0778: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is half")) [score=8.805, prob=3.32e-04]
                Pred@0779: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is introduce")) [score=8.805, prob=3.32e-04]
                Pred@0780: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is double")) [score=8.803, prob=3.31e-04]
                Pred@0781: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is split")) [score=8.798, prob=3.30e-04]
                Pred@0782: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is expand")) [score=8.794, prob=3.29e-04]
                Pred@0783: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is successor")) [score=8.794, prob=3.29e-04]
                Pred@0784: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is square")) [score=8.792, prob=3.28e-04]
                Pred@0785: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is compute")) [score=8.790, prob=3.27e-04]
                Pred@0786: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is power")) [score=8.786, prob=3.26e-04]
                Pred@0787: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is symmetry")) [score=8.784, prob=3.25e-04]
                Pred@0788: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast and whose effect is dissociate")) [score=8.783, prob=3.25e-04]
                Pred@0789: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is half")) [score=8.783, prob=3.25e-04]
                Pred@0790: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is compute")) [score=8.782, prob=3.25e-04]
                Pred@0791: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose main operator is half")) [score=8.781, prob=3.24e-04]
                Pred@0792: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is associate")) [score=8.781, prob=3.24e-04]
                Pred@0793: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is cast")) [score=8.777, prob=3.23e-04]
                Pred@0794: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is none")) [score=8.777, prob=3.23e-04]
                Pred@0795: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is cast")) [score=8.777, prob=3.23e-04]
                Pred@0796: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is multiply")) [score=8.777, prob=3.23e-04]
                Pred@0797: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is compute")) [score=8.773, prob=3.22e-04]
                Pred@0798: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is split")) [score=8.770, prob=3.21e-04]
                Pred@0799: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is successor")) [score=8.769, prob=3.21e-04]
                Pred@0800: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is split")) [score=8.768, prob=3.20e-04]
                Pred@0801: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose domain is numbers")) [score=8.768, prob=3.20e-04]
                Pred@0802: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is split")) [score=8.764, prob=3.19e-04]
                Pred@0803: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is multiply")) [score=8.764, prob=3.19e-04]
                Pred@0804: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is add")) [score=8.763, prob=3.18e-04]
                Pred@0805: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add and whose effect is dissociate")) [score=8.762, prob=3.18e-04]
                Pred@0806: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is introduce")) [score=8.762, prob=3.18e-04]
                Pred@0807: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is square")) [score=8.761, prob=3.18e-04]
                Pred@0808: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is cast")) [score=8.761, prob=3.18e-04]
                Pred@0809: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is double")) [score=8.759, prob=3.17e-04]
                Pred@0810: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is simplify")) [score=8.757, prob=3.17e-04]
                Pred@0811: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is dissociate")) [score=8.751, prob=3.15e-04]
                Pred@0812: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is eliminate")) [score=8.745, prob=3.13e-04]
                Pred@0813: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose secondary operator is none")) [score=8.742, prob=3.12e-04]
                Pred@0814: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is simplify")) [score=8.739, prob=3.11e-04]
                Pred@0815: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is rotate")) [score=8.736, prob=3.10e-04]
                Pred@0816: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is symmetry")) [score=8.735, prob=3.10e-04]
                Pred@0817: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is associate")) [score=8.734, prob=3.09e-04]
                Pred@0818: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square and whose effect is introduce")) [score=8.734, prob=3.09e-04]
                Pred@0819: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is divide")) [score=8.729, prob=3.08e-04]
                Pred@0820: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is cast")) [score=8.729, prob=3.08e-04]
                Pred@0821: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is square")) [score=8.728, prob=3.08e-04]
                Pred@0822: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is successor")) [score=8.727, prob=3.07e-04]
                Pred@0823: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is divide")) [score=8.717, prob=3.04e-04]
                Pred@0824: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is convert")) [score=8.714, prob=3.03e-04]
                Pred@0825: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is half")) [score=8.714, prob=3.03e-04]
                Pred@0826: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is factorize")) [score=8.711, prob=3.03e-04]
                Pred@0827: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is associate")) [score=8.710, prob=3.02e-04]
                Pred@0828: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is convert")) [score=8.710, prob=3.02e-04]
                Pred@0829: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is double")) [score=8.708, prob=3.01e-04]
                Pred@0830: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is half")) [score=8.706, prob=3.01e-04]
                Pred@0831: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is split")) [score=8.700, prob=2.99e-04]
                Pred@0832: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is zero")) [score=8.698, prob=2.99e-04]
                Pred@0833: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is zero")) [score=8.697, prob=2.98e-04]
                Pred@0834: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is eliminate")) [score=8.696, prob=2.98e-04]
                Pred@0835: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is rotate")) [score=8.690, prob=2.96e-04]
                Pred@0836: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is simplify")) [score=8.690, prob=2.96e-04]
                Pred@0837: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is rotate")) [score=8.688, prob=2.95e-04]
                Pred@0838: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is divide")) [score=8.684, prob=2.94e-04]
                Pred@0839: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is distribute")) [score=8.682, prob=2.94e-04]
                Pred@0840: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is compute")) [score=8.681, prob=2.93e-04]
                Pred@0841: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is successor")) [score=8.680, prob=2.93e-04]
                Pred@0842: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is square")) [score=8.672, prob=2.91e-04]
                Pred@0843: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is zero")) [score=8.671, prob=2.91e-04]
                Pred@0844: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is double")) [score=8.668, prob=2.90e-04]
                Pred@0845: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is double")) [score=8.668, prob=2.90e-04]
                Pred@0846: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is split")) [score=8.667, prob=2.89e-04]
                Pred@0847: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is square")) [score=8.662, prob=2.88e-04]
                Pred@0848: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is none")) [score=8.656, prob=2.86e-04]
                Pred@0849: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is divide")) [score=8.656, prob=2.86e-04]
                Pred@0850: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is power")) [score=8.654, prob=2.86e-04]
                Pred@0851: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is half")) [score=8.648, prob=2.84e-04]
                Pred@0852: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose secondary operator is multiply")) [score=8.647, prob=2.84e-04]
                Pred@0853: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose secondary operator is multiply")) [score=8.645, prob=2.83e-04]
                Pred@0854: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is associate")) [score=8.641, prob=2.82e-04]
                Pred@0855: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is distribute")) [score=8.636, prob=2.80e-04]
                Pred@0856: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is power")) [score=8.634, prob=2.80e-04]
                Pred@0857: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is add")) [score=8.632, prob=2.80e-04]
                Pred@0858: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is compute")) [score=8.629, prob=2.79e-04]
                Pred@0859: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is compute")) [score=8.622, prob=2.77e-04]
                Pred@0860: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is square")) [score=8.620, prob=2.76e-04]
                Pred@0861: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is half")) [score=8.620, prob=2.76e-04]
                Pred@0862: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is symmetry")) [score=8.618, prob=2.76e-04]
                Pred@0863: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is convert")) [score=8.614, prob=2.75e-04]
                Pred@0864: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose effect is expand")) [score=8.603, prob=2.71e-04]
                Pred@0865: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is factorize")) [score=8.603, prob=2.71e-04]
                Pred@0866: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is rotate")) [score=8.601, prob=2.71e-04]
                Pred@0867: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose secondary operator is half")) [score=8.598, prob=2.70e-04]
                Pred@0868: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is successor")) [score=8.598, prob=2.70e-04]
                Pred@0869: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is half")) [score=8.598, prob=2.70e-04]
                Pred@0870: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is associate")) [score=8.597, prob=2.70e-04]
                Pred@0871: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is convert")) [score=8.597, prob=2.70e-04]
                Pred@0872: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is half")) [score=8.596, prob=2.70e-04]
                Pred@0873: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is half")) [score=8.595, prob=2.69e-04]
                Pred@0874: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is half")) [score=8.593, prob=2.69e-04]
                Pred@0875: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is expand")) [score=8.590, prob=2.68e-04]
                Pred@0876: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is successor")) [score=8.588, prob=2.67e-04]
                Pred@0877: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is none")) [score=8.582, prob=2.66e-04]
                Pred@0878: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is multiply")) [score=8.578, prob=2.65e-04]
                Pred@0879: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is none")) [score=8.576, prob=2.64e-04]
                Pred@0880: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is add")) [score=8.574, prob=2.64e-04]
                Pred@0881: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is add")) [score=8.571, prob=2.63e-04]
                Pred@0882: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is add")) [score=8.567, prob=2.62e-04]
                Pred@0883: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is divide")) [score=8.565, prob=2.61e-04]
                Pred@0884: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is factorize")) [score=8.564, prob=2.61e-04]
                Pred@0885: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is simplify")) [score=8.562, prob=2.61e-04]
                Pred@0886: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is square")) [score=8.562, prob=2.60e-04]
                Pred@0887: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is power")) [score=8.561, prob=2.60e-04]
                Pred@0888: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is none")) [score=8.559, prob=2.60e-04]
                Pred@0889: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is associate")) [score=8.553, prob=2.58e-04]
                Pred@0890: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is dissociate")) [score=8.553, prob=2.58e-04]
                Pred@0891: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is compute")) [score=8.552, prob=2.58e-04]
                Pred@0892: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_main_operator))))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is main operator of POW_2")) [score=8.552, prob=2.58e-04]
                Pred@0893: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is square")) [score=8.552, prob=2.58e-04]
                Pred@0894: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is multiply")) [score=8.551, prob=2.58e-04]
                Pred@0895: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square and whose main operator is multiply")) [score=8.549, prob=2.57e-04]
                Pred@0896: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is compute")) [score=8.548, prob=2.57e-04]
                Pred@0897: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is expand")) [score=8.548, prob=2.57e-04]
                Pred@0898: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose main operator is multiply")) [score=8.547, prob=2.57e-04]
                Pred@0899: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is distribute")) [score=8.546, prob=2.56e-04]
                Pred@0900: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is symmetry")) [score=8.545, prob=2.56e-04]
                Pred@0901: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is square")) [score=8.545, prob=2.56e-04]
                Pred@0902: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is multiply")) [score=8.544, prob=2.56e-04]
                Pred@0903: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is none")) [score=8.540, prob=2.55e-04]
                Pred@0904: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is square")) [score=8.540, prob=2.55e-04]
                Pred@0905: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is simplify")) [score=8.540, prob=2.55e-04]
                Pred@0906: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is none")) [score=8.536, prob=2.54e-04]
                Pred@0907: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is successor")) [score=8.535, prob=2.54e-04]
                Pred@0908: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is dissociate")) [score=8.534, prob=2.53e-04]
                Pred@0909: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is distribute")) [score=8.533, prob=2.53e-04]
                Pred@0910: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is introduce")) [score=8.531, prob=2.53e-04]
                Pred@0911: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is zero")) [score=8.530, prob=2.52e-04]
                Pred@0912: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is zero")) [score=8.525, prob=2.51e-04]
                Pred@0913: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is split")) [score=8.522, prob=2.50e-04]
                Pred@0914: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is rotate")) [score=8.520, prob=2.50e-04]
                Pred@0915: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose domain is the reals")) [score=8.520, prob=2.50e-04]
                Pred@0916: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is cast")) [score=8.514, prob=2.48e-04]
                Pred@0917: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is square")) [score=8.513, prob=2.48e-04]
                Pred@0918: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is square")) [score=8.513, prob=2.48e-04]
                Pred@0919: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is none")) [score=8.511, prob=2.48e-04]
                Pred@0920: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is dissociate")) [score=8.508, prob=2.47e-04]
                Pred@0921: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is dissociate")) [score=8.507, prob=2.47e-04]
                Pred@0922: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is half")) [score=8.506, prob=2.46e-04]
                Pred@0923: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is half")) [score=8.503, prob=2.46e-04]
                Pred@0924: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is factorize")) [score=8.503, prob=2.46e-04]
                Pred@0925: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is expand")) [score=8.499, prob=2.45e-04]
                Pred@0926: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is rotate")) [score=8.498, prob=2.45e-04]
                Pred@0927: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is divide")) [score=8.498, prob=2.44e-04]
                Pred@0928: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is divide")) [score=8.498, prob=2.44e-04]
                Pred@0929: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is zero")) [score=8.497, prob=2.44e-04]
                Pred@0930: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is half")) [score=8.497, prob=2.44e-04]
                Pred@0931: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose secondary operator is half")) [score=8.496, prob=2.44e-04]
                Pred@0932: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is compute")) [score=8.495, prob=2.44e-04]
                Pred@0933: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is multiply")) [score=8.495, prob=2.44e-04]
                Pred@0934: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is compute")) [score=8.494, prob=2.43e-04]
                Pred@0935: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is associate")) [score=8.492, prob=2.43e-04]
                Pred@0936: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is half")) [score=8.486, prob=2.41e-04]
                Pred@0937: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is square")) [score=8.484, prob=2.41e-04]
                Pred@0938: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is simplify")) [score=8.484, prob=2.41e-04]
                Pred@0939: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is introduce")) [score=8.481, prob=2.40e-04]
                Pred@0940: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is half")) [score=8.479, prob=2.40e-04]
                Pred@0941: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is split")) [score=8.475, prob=2.39e-04]
                Pred@0942: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is power")) [score=8.474, prob=2.39e-04]
                Pred@0943: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is simplify")) [score=8.468, prob=2.37e-04]
                Pred@0944: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals and whose effect is rotate")) [score=8.468, prob=2.37e-04]
                Pred@0945: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is associate")) [score=8.467, prob=2.37e-04]
                Pred@0946: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is distribute")) [score=8.464, prob=2.36e-04]
                Pred@0947: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose secondary operator is none")) [score=8.464, prob=2.36e-04]
                Pred@0948: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is zero")) [score=8.463, prob=2.36e-04]
                Pred@0949: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is eliminate")) [score=8.459, prob=2.35e-04]
                Pred@0950: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is successor")) [score=8.457, prob=2.35e-04]
                Pred@0951: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is compute")) [score=8.456, prob=2.34e-04]
                Pred@0952: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is zero")) [score=8.455, prob=2.34e-04]
                Pred@0953: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is eliminate")) [score=8.454, prob=2.34e-04]
                Pred@0954: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is introduce")) [score=8.454, prob=2.34e-04]
                Pred@0955: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is convert")) [score=8.453, prob=2.34e-04]
                Pred@0956: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is expand")) [score=8.452, prob=2.33e-04]
                Pred@0957: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is dissociate")) [score=8.445, prob=2.32e-04]
                Pred@0958: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is convert")) [score=8.437, prob=2.30e-04]
                Pred@0959: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is simplify")) [score=8.437, prob=2.30e-04]
                Pred@0960: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is expand")) [score=8.430, prob=2.28e-04]
                Pred@0961: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is symmetry")) [score=8.430, prob=2.28e-04]
                Pred@0962: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is divide")) [score=8.423, prob=2.27e-04]
                Pred@0963: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is simplify")) [score=8.419, prob=2.26e-04]
                Pred@0964: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is dissociate")) [score=8.417, prob=2.25e-04]
                Pred@0965: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is divide")) [score=8.415, prob=2.25e-04]
                Pred@0966: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is none")) [score=8.415, prob=2.25e-04]
                Pred@0967: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is expand")) [score=8.413, prob=2.24e-04]
                Pred@0968: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is cast")) [score=8.411, prob=2.24e-04]
                Pred@0969: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is distribute")) [score=8.411, prob=2.24e-04]
                Pred@0970: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is associate")) [score=8.406, prob=2.23e-04]
                Pred@0971: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is double")) [score=8.405, prob=2.23e-04]
                Pred@0972: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is dissociate")) [score=8.404, prob=2.22e-04]
                Pred@0973: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is multiply")) [score=8.402, prob=2.22e-04]
                Pred@0974: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose domain is numbers")) [score=8.401, prob=2.22e-04]
                Pred@0975: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is double")) [score=8.394, prob=2.20e-04]
                Pred@0976: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is successor")) [score=8.391, prob=2.20e-04]
                Pred@0977: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is half")) [score=8.391, prob=2.20e-04]
                Pred@0978: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is power")) [score=8.389, prob=2.19e-04]
                Pred@0979: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is double")) [score=8.385, prob=2.18e-04]
                Pred@0980: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is simplify")) [score=8.384, prob=2.18e-04]
                Pred@0981: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is associate")) [score=8.382, prob=2.18e-04]
                Pred@0982: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is half")) [score=8.375, prob=2.16e-04]
                Pred@0983: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is convert")) [score=8.375, prob=2.16e-04]
                Pred@0984: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is square")) [score=8.373, prob=2.16e-04]
                Pred@0985: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is square")) [score=8.363, prob=2.14e-04]
                Pred@0986: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is symmetry")) [score=8.352, prob=2.11e-04]
                Pred@0987: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is square")) [score=8.352, prob=2.11e-04]
                Pred@0988: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is eliminate")) [score=8.351, prob=2.11e-04]
                Pred@0989: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose secondary operator is none")) [score=8.349, prob=2.11e-04]
                Pred@0990: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose effect is expand")) [score=8.348, prob=2.10e-04]
                Pred@0991: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is rotate")) [score=8.348, prob=2.10e-04]
                Pred@0992: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is rotate")) [score=8.340, prob=2.09e-04]
                Pred@0993: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is simplify")) [score=8.340, prob=2.09e-04]
                Pred@0994: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is simplify")) [score=8.339, prob=2.08e-04]
                Pred@0995: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is expand")) [score=8.337, prob=2.08e-04]
                Pred@0996: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is split")) [score=8.337, prob=2.08e-04]
                Pred@0997: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose secondary operator is multiply")) [score=8.335, prob=2.08e-04]
                Pred@0998: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is successor")) [score=8.333, prob=2.07e-04]
                Pred@0999: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is distribute")) [score=8.329, prob=2.06e-04]
                Pred@1000: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is add")) [score=8.328, prob=2.06e-04]
                Pred@1001: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is expand")) [score=8.327, prob=2.06e-04]
                Pred@1002: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is cast")) [score=8.326, prob=2.06e-04]
                Pred@1003: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is dissociate")) [score=8.321, prob=2.05e-04]
                Pred@1004: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is dissociate")) [score=8.319, prob=2.04e-04]
                Pred@1005: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is none")) [score=8.318, prob=2.04e-04]
                Pred@1006: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is square")) [score=8.315, prob=2.04e-04]
                Pred@1007: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is power")) [score=8.315, prob=2.03e-04]
                Pred@1008: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor and whose main operator is multiply")) [score=8.313, prob=2.03e-04]
                Pred@1009: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose main operator is multiply")) [score=8.313, prob=2.03e-04]
                Pred@1010: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is compute")) [score=8.312, prob=2.03e-04]
                Pred@1011: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is add")) [score=8.309, prob=2.02e-04]
                Pred@1012: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is cast")) [score=8.304, prob=2.01e-04]
                Pred@1013: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is multiply")) [score=8.294, prob=1.99e-04]
                Pred@1014: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is power")) [score=8.294, prob=1.99e-04]
                Pred@1015: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is divide")) [score=8.292, prob=1.99e-04]
                Pred@1016: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is add")) [score=8.288, prob=1.98e-04]
                Pred@1017: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose effect is factorize")) [score=8.287, prob=1.98e-04]
                Pred@1018: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is rotate")) [score=8.285, prob=1.98e-04]
                Pred@1019: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is cast")) [score=8.285, prob=1.98e-04]
                Pred@1020: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is factorize")) [score=8.283, prob=1.97e-04]
                Pred@1021: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is factorize")) [score=8.272, prob=1.95e-04]
                Pred@1022: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is square")) [score=8.271, prob=1.95e-04]
                Pred@1023: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is expand")) [score=8.271, prob=1.95e-04]
                Pred@1024: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose main operator is multiply")) [score=8.270, prob=1.95e-04]
                Pred@1025: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is factorize")) [score=8.269, prob=1.94e-04]
                Pred@1026: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor and whose main operator is power")) [score=8.268, prob=1.94e-04]
                Pred@1027: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is compute")) [score=8.268, prob=1.94e-04]
                Pred@1028: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is introduce")) [score=8.262, prob=1.93e-04]
                Pred@1029: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is square")) [score=8.258, prob=1.92e-04]
                Pred@1030: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is add")) [score=8.258, prob=1.92e-04]
                Pred@1031: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is zero")) [score=8.256, prob=1.92e-04]
                Pred@1032: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is distribute")) [score=8.251, prob=1.91e-04]
                Pred@1033: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is expand")) [score=8.251, prob=1.91e-04]
                Pred@1034: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is add")) [score=8.250, prob=1.91e-04]
                Pred@1035: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is power")) [score=8.250, prob=1.91e-04]
                Pred@1036: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is none")) [score=8.248, prob=1.90e-04]
                Pred@1037: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is associate")) [score=8.243, prob=1.89e-04]
                Pred@1038: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is convert")) [score=8.242, prob=1.89e-04]
                Pred@1039: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is rotate")) [score=8.239, prob=1.89e-04]
                Pred@1040: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is divide")) [score=8.238, prob=1.89e-04]
                Pred@1041: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is divide")) [score=8.238, prob=1.88e-04]
                Pred@1042: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is half")) [score=8.236, prob=1.88e-04]
                Pred@1043: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is distribute")) [score=8.235, prob=1.88e-04]
                Pred@1044: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is power")) [score=8.232, prob=1.87e-04]
                Pred@1045: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is introduce")) [score=8.231, prob=1.87e-04]
                Pred@1046: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is split")) [score=8.223, prob=1.86e-04]
                Pred@1047: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is compute")) [score=8.222, prob=1.85e-04]
                Pred@1048: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is half")) [score=8.217, prob=1.85e-04]
                Pred@1049: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose effect is split")) [score=8.217, prob=1.85e-04]
                Pred@1050: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is none")) [score=8.215, prob=1.84e-04]
                Pred@1051: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is add")) [score=8.214, prob=1.84e-04]
                Pred@1052: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_domain) (string =) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose domain is the reals")) [score=8.213, prob=1.84e-04]
                Pred@1053: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is divide")) [score=8.210, prob=1.83e-04]
                Pred@1054: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is symmetry")) [score=8.209, prob=1.83e-04]
                Pred@1055: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is square")) [score=8.209, prob=1.83e-04]
                Pred@1056: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is half")) [score=8.208, prob=1.83e-04]
                Pred@1057: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is square")) [score=8.208, prob=1.83e-04]
                Pred@1058: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is eliminate")) [score=8.207, prob=1.83e-04]
                Pred@1059: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is cast")) [score=8.207, prob=1.83e-04]
                Pred@1060: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is none")) [score=8.206, prob=1.83e-04]
                Pred@1061: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is dissociate")) [score=8.201, prob=1.82e-04]
                Pred@1062: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is add")) [score=8.201, prob=1.82e-04]
                Pred@1063: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is power")) [score=8.197, prob=1.81e-04]
                Pred@1064: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is square")) [score=8.193, prob=1.80e-04]
                Pred@1065: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is eliminate")) [score=8.185, prob=1.79e-04]
                Pred@1066: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is distribute")) [score=8.185, prob=1.79e-04]
                Pred@1067: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is successor")) [score=8.184, prob=1.79e-04]
                Pred@1068: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is none")) [score=8.183, prob=1.78e-04]
                Pred@1069: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is symmetry")) [score=8.181, prob=1.78e-04]
                Pred@1070: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is cast")) [score=8.176, prob=1.77e-04]
                Pred@1071: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is eliminate")) [score=8.176, prob=1.77e-04]
                Pred@1072: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is divide")) [score=8.176, prob=1.77e-04]
                Pred@1073: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is multiply")) [score=8.173, prob=1.77e-04]
                Pred@1074: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is square")) [score=8.172, prob=1.76e-04]
                Pred@1075: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is zero")) [score=8.172, prob=1.76e-04]
                Pred@1076: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is expand")) [score=8.169, prob=1.76e-04]
                Pred@1077: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is convert")) [score=8.168, prob=1.76e-04]
                Pred@1078: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is square")) [score=8.166, prob=1.75e-04]
                Pred@1079: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is half")) [score=8.163, prob=1.75e-04]
                Pred@1080: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is expand")) [score=8.149, prob=1.72e-04]
                Pred@1081: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is none")) [score=8.143, prob=1.71e-04]
                Pred@1082: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is power")) [score=8.143, prob=1.71e-04]
                Pred@1083: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is power")) [score=8.142, prob=1.71e-04]
                Pred@1084: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is split")) [score=8.142, prob=1.71e-04]
                Pred@1085: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is power")) [score=8.141, prob=1.71e-04]
                Pred@1086: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is power")) [score=8.140, prob=1.71e-04]
                Pred@1087: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is convert")) [score=8.139, prob=1.71e-04]
                Pred@1088: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is simplify")) [score=8.137, prob=1.70e-04]
                Pred@1089: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is simplify")) [score=8.137, prob=1.70e-04]
                Pred@1090: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is add")) [score=8.135, prob=1.70e-04]
                Pred@1091: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is half")) [score=8.134, prob=1.70e-04]
                Pred@1092: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is introduce")) [score=8.130, prob=1.69e-04]
                Pred@1093: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is convert")) [score=8.129, prob=1.69e-04]
                Pred@1094: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is split")) [score=8.128, prob=1.69e-04]
                Pred@1095: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is half")) [score=8.123, prob=1.68e-04]
                Pred@1096: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply and whose effect is eliminate")) [score=8.121, prob=1.68e-04]
                Pred@1097: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is symmetry")) [score=8.120, prob=1.67e-04]
                Pred@1098: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is symmetry")) [score=8.119, prob=1.67e-04]
                Pred@1099: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is factorize")) [score=8.118, prob=1.67e-04]
                Pred@1100: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is none")) [score=8.116, prob=1.67e-04]
                Pred@1101: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is square")) [score=8.115, prob=1.67e-04]
                Pred@1102: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is square")) [score=8.115, prob=1.67e-04]
                Pred@1103: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is expand")) [score=8.115, prob=1.67e-04]
                Pred@1104: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is rotate")) [score=8.115, prob=1.67e-04]
                Pred@1105: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is rotate")) [score=8.114, prob=1.66e-04]
                Pred@1106: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is cast")) [score=8.113, prob=1.66e-04]
                Pred@1107: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is symmetry")) [score=8.113, prob=1.66e-04]
                Pred@1108: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose main operator is multiply")) [score=8.112, prob=1.66e-04]
                Pred@1109: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is power")) [score=8.112, prob=1.66e-04]
                Pred@1110: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose effect is split")) [score=8.112, prob=1.66e-04]
                Pred@1111: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is symmetry")) [score=8.110, prob=1.66e-04]
                Pred@1112: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is add")) [score=8.107, prob=1.65e-04]
                Pred@1113: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose effect is introduce")) [score=8.107, prob=1.65e-04]
                Pred@1114: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is power")) [score=8.106, prob=1.65e-04]
                Pred@1115: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is none")) [score=8.102, prob=1.64e-04]
                Pred@1116: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is divide")) [score=8.102, prob=1.64e-04]
                Pred@1117: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is half")) [score=8.097, prob=1.64e-04]
                Pred@1118: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is half")) [score=8.096, prob=1.63e-04]
                Pred@1119: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is symmetry")) [score=8.095, prob=1.63e-04]
                Pred@1120: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is none")) [score=8.094, prob=1.63e-04]
                Pred@1121: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is associate")) [score=8.094, prob=1.63e-04]
                Pred@1122: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is factorize")) [score=8.091, prob=1.63e-04]
                Pred@1123: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose secondary operator is none")) [score=8.091, prob=1.63e-04]
                Pred@1124: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is half")) [score=8.090, prob=1.63e-04]
                Pred@1125: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is half")) [score=8.089, prob=1.62e-04]
                Pred@1126: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose secondary operator is half")) [score=8.086, prob=1.62e-04]
                Pred@1127: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is associate")) [score=8.085, prob=1.62e-04]
                Pred@1128: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is introduce")) [score=8.083, prob=1.61e-04]
                Pred@1129: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is simplify")) [score=8.082, prob=1.61e-04]
                Pred@1130: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is split")) [score=8.076, prob=1.60e-04]
                Pred@1131: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is distribute")) [score=8.072, prob=1.60e-04]
                Pred@1132: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is convert")) [score=8.068, prob=1.59e-04]
                Pred@1133: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is simplify")) [score=8.067, prob=1.59e-04]
                Pred@1134: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose main operator is half")) [score=8.067, prob=1.59e-04]
                Pred@1135: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is zero")) [score=8.065, prob=1.59e-04]
                Pred@1136: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is symmetry")) [score=8.063, prob=1.58e-04]
                Pred@1137: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is none")) [score=8.053, prob=1.57e-04]
                Pred@1138: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is dissociate")) [score=8.052, prob=1.56e-04]
                Pred@1139: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is cast")) [score=8.049, prob=1.56e-04]
                Pred@1140: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is half")) [score=8.049, prob=1.56e-04]
                Pred@1141: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is expand")) [score=8.049, prob=1.56e-04]
                Pred@1142: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is square")) [score=8.047, prob=1.56e-04]
                Pred@1143: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is divide")) [score=8.047, prob=1.56e-04]
                Pred@1144: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is zero")) [score=8.042, prob=1.55e-04]
                Pred@1145: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is half")) [score=8.041, prob=1.55e-04]
                Pred@1146: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is square")) [score=8.039, prob=1.55e-04]
                Pred@1147: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is multiply")) [score=8.037, prob=1.54e-04]
                Pred@1148: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose effect is rotate")) [score=8.036, prob=1.54e-04]
                Pred@1149: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose secondary operator is add")) [score=8.034, prob=1.54e-04]
                Pred@1150: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is divide")) [score=8.031, prob=1.53e-04]
                Pred@1151: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is theorem whose main operator is multiply")) [score=8.030, prob=1.53e-04]
                Pred@1152: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is introduce")) [score=8.029, prob=1.53e-04]
                Pred@1153: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is eliminate")) [score=8.028, prob=1.53e-04]
                Pred@1154: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is expand")) [score=8.027, prob=1.53e-04]
                Pred@1155: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is introduce")) [score=8.025, prob=1.52e-04]
                Pred@1156: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose secondary operator is half")) [score=8.023, prob=1.52e-04]
                Pred@1157: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose secondary operator is none")) [score=8.018, prob=1.51e-04]
                Pred@1158: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is rotate")) [score=8.013, prob=1.51e-04]
                Pred@1159: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is eliminate")) [score=8.011, prob=1.50e-04]
                Pred@1160: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose effect is square")) [score=8.009, prob=1.50e-04]
                Pred@1161: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is divide")) [score=8.007, prob=1.50e-04]
                Pred@1162: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is cast")) [score=8.007, prob=1.50e-04]
                Pred@1163: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose secondary operator is power")) [score=8.000, prob=1.48e-04]
                Pred@1164: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose domain is numbers")) [score=7.998, prob=1.48e-04]
                Pred@1165: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is half")) [score=7.997, prob=1.48e-04]
                Pred@1166: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is convert")) [score=7.993, prob=1.48e-04]
                Pred@1167: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is distribute")) [score=7.991, prob=1.47e-04]
                Pred@1168: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is cast")) [score=7.991, prob=1.47e-04]
                Pred@1169: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is divide")) [score=7.989, prob=1.47e-04]
                Pred@1170: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is half")) [score=7.985, prob=1.46e-04]
                Pred@1171: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is introduce")) [score=7.981, prob=1.46e-04]
                Pred@1172: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is convert")) [score=7.970, prob=1.44e-04]
                Pred@1173: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is half")) [score=7.970, prob=1.44e-04]
                Pred@1174: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is multiply")) [score=7.967, prob=1.44e-04]
                Pred@1175: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is square")) [score=7.967, prob=1.44e-04]
                Pred@1176: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is double")) [score=7.966, prob=1.44e-04]
                Pred@1177: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is square")) [score=7.962, prob=1.43e-04]
                Pred@1178: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power and whose main operator is multiply")) [score=7.961, prob=1.43e-04]
                Pred@1179: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is simplify")) [score=7.956, prob=1.42e-04]
                Pred@1180: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is compute")) [score=7.955, prob=1.42e-04]
                Pred@1181: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is divide")) [score=7.954, prob=1.42e-04]
                Pred@1182: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is double")) [score=7.953, prob=1.42e-04]
                Pred@1183: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is convert")) [score=7.952, prob=1.42e-04]
                Pred@1184: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose secondary operator is half")) [score=7.946, prob=1.41e-04]
                Pred@1185: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is add")) [score=7.946, prob=1.41e-04]
                Pred@1186: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose main operator is multiply")) [score=7.945, prob=1.41e-04]
                Pred@1187: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute and whose main operator is multiply")) [score=7.942, prob=1.40e-04]
                Pred@1188: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is factorize")) [score=7.922, prob=1.37e-04]
                Pred@1189: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is square")) [score=7.919, prob=1.37e-04]
                Pred@1190: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand and whose effect is split")) [score=7.917, prob=1.37e-04]
                Pred@1191: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is half")) [score=7.915, prob=1.36e-04]
                Pred@1192: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is introduce")) [score=7.910, prob=1.36e-04]
                Pred@1193: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is half")) [score=7.910, prob=1.36e-04]
                Pred@1194: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is square")) [score=7.906, prob=1.35e-04]
                Pred@1195: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is expand")) [score=7.903, prob=1.35e-04]
                Pred@1196: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is none")) [score=7.900, prob=1.34e-04]
                Pred@1197: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is introduce")) [score=7.898, prob=1.34e-04]
                Pred@1198: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is associate")) [score=7.897, prob=1.34e-04]
                Pred@1199: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is split")) [score=7.887, prob=1.33e-04]
                Pred@1200: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose effect is double")) [score=7.887, prob=1.33e-04]
                Pred@1201: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is cast")) [score=7.885, prob=1.32e-04]
                Pred@1202: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is rotate")) [score=7.884, prob=1.32e-04]
                Pred@1203: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is multiply")) [score=7.884, prob=1.32e-04]
                Pred@1204: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is factorize")) [score=7.884, prob=1.32e-04]
                Pred@1205: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is associate")) [score=7.881, prob=1.32e-04]
                Pred@1206: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is cast")) [score=7.880, prob=1.32e-04]
                Pred@1207: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is square")) [score=7.880, prob=1.32e-04]
                Pred@1208: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is expand")) [score=7.878, prob=1.31e-04]
                Pred@1209: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is half")) [score=7.878, prob=1.31e-04]
                Pred@1210: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is double")) [score=7.874, prob=1.31e-04]
                Pred@1211: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is none")) [score=7.874, prob=1.31e-04]
                Pred@1212: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is square")) [score=7.871, prob=1.31e-04]
                Pred@1213: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is associate")) [score=7.863, prob=1.29e-04]
                Pred@1214: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose secondary operator is none")) [score=7.862, prob=1.29e-04]
                Pred@1215: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is rotate")) [score=7.862, prob=1.29e-04]
                Pred@1216: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose main operator is multiply")) [score=7.861, prob=1.29e-04]
                Pred@1217: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is expand")) [score=7.857, prob=1.29e-04]
                Pred@1218: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is rotate")) [score=7.857, prob=1.29e-04]
                Pred@1219: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is introduce")) [score=7.856, prob=1.29e-04]
                Pred@1220: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is add")) [score=7.853, prob=1.28e-04]
                Pred@1221: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is convert")) [score=7.852, prob=1.28e-04]
                Pred@1222: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is power")) [score=7.850, prob=1.28e-04]
                Pred@1223: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is half")) [score=7.849, prob=1.28e-04]
                Pred@1224: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is power")) [score=7.847, prob=1.27e-04]
                Pred@1225: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is half")) [score=7.841, prob=1.27e-04]
                Pred@1226: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is square")) [score=7.840, prob=1.27e-04]
                Pred@1227: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_sec_operator))))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is secondary operator of POW_2")) [score=7.840, prob=1.27e-04]
                Pred@1228: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is eliminate")) [score=7.839, prob=1.26e-04]
                Pred@1229: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is eliminate")) [score=7.838, prob=1.26e-04]
                Pred@1230: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is multiply")) [score=7.833, prob=1.26e-04]
                Pred@1231: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is half")) [score=7.830, prob=1.25e-04]
                Pred@1232: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert and whose main operator is multiply")) [score=7.829, prob=1.25e-04]
                Pred@1233: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is symmetry")) [score=7.828, prob=1.25e-04]
                Pred@1234: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is associate")) [score=7.825, prob=1.25e-04]
                Pred@1235: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is square")) [score=7.825, prob=1.25e-04]
                Pred@1236: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is compute")) [score=7.822, prob=1.24e-04]
                Pred@1237: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is double")) [score=7.822, prob=1.24e-04]
                Pred@1238: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is square")) [score=7.822, prob=1.24e-04]
                Pred@1239: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is none")) [score=7.820, prob=1.24e-04]
                Pred@1240: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is introduce")) [score=7.811, prob=1.23e-04]
                Pred@1241: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is square")) [score=7.806, prob=1.22e-04]
                Pred@1242: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is square")) [score=7.802, prob=1.22e-04]
                Pred@1243: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is eliminate")) [score=7.800, prob=1.22e-04]
                Pred@1244: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is successor")) [score=7.799, prob=1.22e-04]
                Pred@1245: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is associate")) [score=7.798, prob=1.21e-04]
                Pred@1246: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is half")) [score=7.796, prob=1.21e-04]
                Pred@1247: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is expand")) [score=7.795, prob=1.21e-04]
                Pred@1248: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is associate")) [score=7.787, prob=1.20e-04]
                Pred@1249: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is split")) [score=7.778, prob=1.19e-04]
                Pred@1250: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is theorem whose effect is dissociate")) [score=7.777, prob=1.19e-04]
                Pred@1251: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is associate")) [score=7.771, prob=1.18e-04]
                Pred@1252: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is square")) [score=7.767, prob=1.18e-04]
                Pred@1253: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is half")) [score=7.767, prob=1.18e-04]
                Pred@1254: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is rotate")) [score=7.761, prob=1.17e-04]
                Pred@1255: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is zero")) [score=7.761, prob=1.17e-04]
                Pred@1256: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is factorize")) [score=7.760, prob=1.17e-04]
                Pred@1257: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is symmetry")) [score=7.758, prob=1.17e-04]
                Pred@1258: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is compute")) [score=7.757, prob=1.17e-04]
                Pred@1259: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is symmetry")) [score=7.746, prob=1.15e-04]
                Pred@1260: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is split")) [score=7.745, prob=1.15e-04]
                Pred@1261: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is double")) [score=7.743, prob=1.15e-04]
                Pred@1262: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is half")) [score=7.742, prob=1.15e-04]
                Pred@1263: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is double")) [score=7.741, prob=1.15e-04]
                Pred@1264: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is power")) [score=7.741, prob=1.15e-04]
                Pred@1265: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose main operator is half")) [score=7.730, prob=1.13e-04]
                Pred@1266: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is none")) [score=7.726, prob=1.13e-04]
                Pred@1267: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is square")) [score=7.724, prob=1.13e-04]
                Pred@1268: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is associate")) [score=7.721, prob=1.12e-04]
                Pred@1269: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is factorize")) [score=7.715, prob=1.12e-04]
                Pred@1270: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is factorize")) [score=7.705, prob=1.11e-04]
                Pred@1271: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is power")) [score=7.705, prob=1.11e-04]
                Pred@1272: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is associate")) [score=7.705, prob=1.11e-04]
                Pred@1273: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is zero")) [score=7.704, prob=1.10e-04]
                Pred@1274: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is distribute")) [score=7.697, prob=1.10e-04]
                Pred@1275: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose secondary operator is half")) [score=7.687, prob=1.09e-04]
                Pred@1276: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is add")) [score=7.687, prob=1.09e-04]
                Pred@1277: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is dissociate")) [score=7.686, prob=1.09e-04]
                Pred@1278: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is half")) [score=7.680, prob=1.08e-04]
                Pred@1279: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is multiply")) [score=7.678, prob=1.08e-04]
                Pred@1280: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is simplify")) [score=7.678, prob=1.08e-04]
                Pred@1281: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is multiply")) [score=7.677, prob=1.07e-04]
                Pred@1282: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is theorem whose effect is rotate")) [score=7.672, prob=1.07e-04]
                Pred@1283: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_main_operator))))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is main operator of POW_2")) [score=7.670, prob=1.07e-04]
                Pred@1284: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is double")) [score=7.667, prob=1.06e-04]
                Pred@1285: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is dissociate")) [score=7.661, prob=1.06e-04]
                Pred@1286: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is half")) [score=7.658, prob=1.06e-04]
                Pred@1287: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose effect is dissociate")) [score=7.654, prob=1.05e-04]
                Pred@1288: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is double")) [score=7.649, prob=1.05e-04]
                Pred@1289: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is simplify")) [score=7.647, prob=1.04e-04]
                Pred@1290: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is expand")) [score=7.640, prob=1.04e-04]
                Pred@1291: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is distribute")) [score=7.636, prob=1.03e-04]
                Pred@1292: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is square")) [score=7.633, prob=1.03e-04]
                Pred@1293: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is eliminate")) [score=7.629, prob=1.03e-04]
                Pred@1294: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is zero")) [score=7.625, prob=1.02e-04]
                Pred@1295: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is multiply")) [score=7.624, prob=1.02e-04]
                Pred@1296: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is power")) [score=7.620, prob=1.02e-04]
                Pred@1297: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is compute")) [score=7.612, prob=1.01e-04]
                Pred@1298: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is successor")) [score=7.610, prob=1.01e-04]
                Pred@1299: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is half")) [score=7.609, prob=1.00e-04]
                Pred@1300: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is add")) [score=7.600, prob=9.96e-05]
                Pred@1301: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is dissociate")) [score=7.599, prob=9.95e-05]
                Pred@1302: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is square")) [score=7.598, prob=9.94e-05]
                Pred@1303: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is cast")) [score=7.597, prob=9.92e-05]
                Pred@1304: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is divide")) [score=7.597, prob=9.92e-05]
                Pred@1305: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is zero")) [score=7.595, prob=9.91e-05]
                Pred@1306: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is symmetry")) [score=7.595, prob=9.90e-05]
                Pred@1307: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is expand")) [score=7.593, prob=9.88e-05]
                Pred@1308: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is half")) [score=7.591, prob=9.87e-05]
                Pred@1309: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is double")) [score=7.590, prob=9.86e-05]
                Pred@1310: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is half")) [score=7.584, prob=9.80e-05]
                Pred@1311: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is dissociate")) [score=7.582, prob=9.78e-05]
                Pred@1312: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is factorize")) [score=7.580, prob=9.76e-05]
                Pred@1313: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is split")) [score=7.579, prob=9.75e-05]
                Pred@1314: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is split")) [score=7.573, prob=9.69e-05]
                Pred@1315: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is square")) [score=7.572, prob=9.68e-05]
                Pred@1316: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is half")) [score=7.572, prob=9.68e-05]
                Pred@1317: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is dissociate")) [score=7.569, prob=9.66e-05]
                Pred@1318: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is compute")) [score=7.569, prob=9.66e-05]
                Pred@1319: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is factorize")) [score=7.562, prob=9.59e-05]
                Pred@1320: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is split")) [score=7.562, prob=9.58e-05]
                Pred@1321: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is dissociate")) [score=7.561, prob=9.58e-05]
                Pred@1322: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is multiply")) [score=7.560, prob=9.57e-05]
                Pred@1323: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is cast")) [score=7.558, prob=9.54e-05]
                Pred@1324: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is split")) [score=7.556, prob=9.53e-05]
                Pred@1325: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is divide")) [score=7.556, prob=9.53e-05]
                Pred@1326: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is none")) [score=7.546, prob=9.44e-05]
                Pred@1327: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is square")) [score=7.544, prob=9.41e-05]
                Pred@1328: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is eliminate")) [score=7.540, prob=9.38e-05]
                Pred@1329: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose main operator is divide")) [score=7.538, prob=9.36e-05]
                Pred@1330: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is square")) [score=7.531, prob=9.29e-05]
                Pred@1331: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is convert")) [score=7.512, prob=9.12e-05]
                Pred@1332: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is eliminate")) [score=7.512, prob=9.12e-05]
                Pred@1333: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is square")) [score=7.511, prob=9.11e-05]
                Pred@1334: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is associate")) [score=7.508, prob=9.08e-05]
                Pred@1335: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is introduce")) [score=7.505, prob=9.05e-05]
                Pred@1336: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is none")) [score=7.487, prob=8.89e-05]
                Pred@1337: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is power")) [score=7.485, prob=8.88e-05]
                Pred@1338: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose secondary operator is half")) [score=7.482, prob=8.85e-05]
                Pred@1339: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose secondary operator is half")) [score=7.479, prob=8.82e-05]
                Pred@1340: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is simplify")) [score=7.478, prob=8.82e-05]
                Pred@1341: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is split")) [score=7.477, prob=8.80e-05]
                Pred@1342: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is introduce")) [score=7.475, prob=8.79e-05]
                Pred@1343: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is multiply")) [score=7.466, prob=8.71e-05]
                Pred@1344: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is factorize")) [score=7.464, prob=8.69e-05]
                Pred@1345: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_sec_operator))))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is secondary operator of POW_2")) [score=7.447, prob=8.54e-05]
                Pred@1346: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is symmetry")) [score=7.443, prob=8.51e-05]
                Pred@1347: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate and whose effect is eliminate")) [score=7.441, prob=8.49e-05]
                Pred@1348: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose effect is rotate")) [score=7.437, prob=8.46e-05]
                Pred@1349: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is divide")) [score=7.436, prob=8.45e-05]
                Pred@1350: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is half")) [score=7.427, prob=8.37e-05]
                Pred@1351: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is dissociate")) [score=7.424, prob=8.35e-05]
                Pred@1352: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is power")) [score=7.424, prob=8.35e-05]
                Pred@1353: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double and whose effect is dissociate")) [score=7.412, prob=8.25e-05]
                Pred@1354: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half and whose main operator is multiply")) [score=7.407, prob=8.21e-05]
                Pred@1355: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is multiply")) [score=7.406, prob=8.20e-05]
                Pred@1356: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is introduce")) [score=7.404, prob=8.18e-05]
                Pred@1357: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is rotate")) [score=7.399, prob=8.15e-05]
                Pred@1358: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is double")) [score=7.396, prob=8.12e-05]
                Pred@1359: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is add")) [score=7.395, prob=8.11e-05]
                Pred@1360: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is introduce")) [score=7.390, prob=8.07e-05]
                Pred@1361: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is add")) [score=7.389, prob=8.07e-05]
                Pred@1362: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add and whose main operator is multiply")) [score=7.386, prob=8.04e-05]
                Pred@1363: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is zero")) [score=7.384, prob=8.02e-05]
                Pred@1364: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is power")) [score=7.381, prob=8.00e-05]
                Pred@1365: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is eliminate")) [score=7.376, prob=7.96e-05]
                Pred@1366: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is dissociate")) [score=7.374, prob=7.94e-05]
                Pred@1367: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is eliminate")) [score=7.373, prob=7.93e-05]
                Pred@1368: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is multiply")) [score=7.370, prob=7.91e-05]
                Pred@1369: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute and whose effect is rotate")) [score=7.356, prob=7.80e-05]
                Pred@1370: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is none")) [score=7.352, prob=7.77e-05]
                Pred@1371: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is divide")) [score=7.352, prob=7.77e-05]
                Pred@1372: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is eliminate")) [score=7.347, prob=7.73e-05]
                Pred@1373: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is factorize")) [score=7.342, prob=7.69e-05]
                Pred@1374: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose secondary operator is add")) [score=7.338, prob=7.66e-05]
                Pred@1375: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is symmetry")) [score=7.336, prob=7.65e-05]
                Pred@1376: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide and whose main operator is multiply")) [score=7.335, prob=7.64e-05]
                Pred@1377: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is power")) [score=7.331, prob=7.61e-05]
                Pred@1378: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_domain))))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is domain of POW_2")) [score=7.327, prob=7.58e-05]
                Pred@1379: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is factorize")) [score=7.324, prob=7.55e-05]
                Pred@1380: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose main operator is divide")) [score=7.323, prob=7.55e-05]
                Pred@1381: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is associate")) [score=7.318, prob=7.51e-05]
                Pred@1382: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is double")) [score=7.317, prob=7.50e-05]
                Pred@1383: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose effect is dissociate")) [score=7.314, prob=7.48e-05]
                Pred@1384: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose main operator is none")) [score=7.308, prob=7.44e-05]
                Pred@1385: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose main operator is power")) [score=7.306, prob=7.42e-05]
                Pred@1386: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is compute")) [score=7.306, prob=7.42e-05]
                Pred@1387: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate and whose effect is rotate")) [score=7.305, prob=7.41e-05]
                Pred@1388: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is introduce")) [score=7.304, prob=7.41e-05]
                Pred@1389: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is associate")) [score=7.303, prob=7.40e-05]
                Pred@1390: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is factorize")) [score=7.300, prob=7.38e-05]
                Pred@1391: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is square")) [score=7.300, prob=7.37e-05]
                Pred@1392: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is dissociate")) [score=7.298, prob=7.36e-05]
                Pred@1393: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is half")) [score=7.295, prob=7.34e-05]
                Pred@1394: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is split")) [score=7.281, prob=7.24e-05]
                Pred@1395: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is introduce")) [score=7.278, prob=7.22e-05]
                Pred@1396: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is half")) [score=7.278, prob=7.21e-05]
                Pred@1397: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is half")) [score=7.268, prob=7.14e-05]
                Pred@1398: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is square")) [score=7.263, prob=7.10e-05]
                Pred@1399: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is cast")) [score=7.245, prob=6.98e-05]
                Pred@1400: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero and whose effect is dissociate")) [score=7.237, prob=6.93e-05]
                Pred@1401: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is expand")) [score=7.232, prob=6.89e-05]
                Pred@1402: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is expand")) [score=7.223, prob=6.83e-05]
                Pred@1403: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is double")) [score=7.219, prob=6.80e-05]
                Pred@1404: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is convert")) [score=7.219, prob=6.80e-05]
                Pred@1405: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is half")) [score=7.219, prob=6.80e-05]
                Pred@1406: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose main operator is multiply")) [score=7.216, prob=6.78e-05]
                Pred@1407: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose main operator is multiply")) [score=7.215, prob=6.78e-05]
                Pred@1408: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose main operator is none")) [score=7.212, prob=6.76e-05]
                Pred@1409: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is factorize")) [score=7.212, prob=6.75e-05]
                Pred@1410: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is none")) [score=7.212, prob=6.75e-05]
                Pred@1411: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is add")) [score=7.211, prob=6.75e-05]
                Pred@1412: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is double")) [score=7.208, prob=6.73e-05]
                Pred@1413: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is split")) [score=7.204, prob=6.70e-05]
                Pred@1414: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is rotate")) [score=7.189, prob=6.60e-05]
                Pred@1415: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is dissociate")) [score=7.186, prob=6.58e-05]
                Pred@1416: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is zero")) [score=7.182, prob=6.55e-05]
                Pred@1417: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is double")) [score=7.181, prob=6.55e-05]
                Pred@1418: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is dissociate")) [score=7.180, prob=6.54e-05]
                Pred@1419: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is half")) [score=7.162, prob=6.42e-05]
                Pred@1420: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is factorize")) [score=7.131, prob=6.23e-05]
                Pred@1421: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is split")) [score=7.123, prob=6.18e-05]
                Pred@1422: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is dissociate")) [score=7.115, prob=6.13e-05]
                Pred@1423: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is rotate")) [score=7.096, prob=6.02e-05]
                Pred@1424: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is zero")) [score=7.089, prob=5.97e-05]
                Pred@1425: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is half")) [score=7.084, prob=5.94e-05]
                Pred@1426: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is expand")) [score=7.082, prob=5.93e-05]
                Pred@1427: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is zero")) [score=7.065, prob=5.83e-05]
                Pred@1428: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce and whose effect is rotate")) [score=7.057, prob=5.79e-05]
                Pred@1429: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide and whose main operator is multiply")) [score=7.056, prob=5.78e-05]
                Pred@1430: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is half")) [score=7.053, prob=5.76e-05]
                Pred@1431: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose effect is factorize")) [score=7.050, prob=5.74e-05]
                Pred@1432: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply)))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is theorem whose main operator is multiply")) [score=7.027, prob=5.62e-05]
                Pred@1433: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose effect is half")) [score=7.027, prob=5.61e-05]
                Pred@1434: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is double")) [score=7.026, prob=5.61e-05]
                Pred@1435: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is add")) [score=7.023, prob=5.59e-05]
                Pred@1436: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is double")) [score=7.009, prob=5.52e-05]
                Pred@1437: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.add))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not add")) [score=7.009, prob=5.51e-05]
                Pred@1438: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none and whose effect is factorize")) [score=6.986, prob=5.39e-05]
                Pred@1439: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is dissociate")) [score=6.985, prob=5.38e-05]
                Pred@1440: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is half")) [score=6.975, prob=5.33e-05]
                Pred@1441: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is eliminate")) [score=6.973, prob=5.32e-05]
                Pred@1442: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is split")) [score=6.963, prob=5.27e-05]
                Pred@1443: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose main operator is multiply")) [score=6.949, prob=5.19e-05]
                Pred@1444: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is square")) [score=6.943, prob=5.16e-05]
                Pred@1445: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_effect))))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is effect of POW_2")) [score=6.942, prob=5.15e-05]
                Pred@1446: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify and whose effect is half")) [score=6.939, prob=5.14e-05]
                Pred@1447: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is simplify")) [score=6.935, prob=5.12e-05]
                Pred@1448: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split and whose effect is split")) [score=6.917, prob=5.03e-05]
                Pred@1449: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square and whose effect is eliminate")) [score=6.915, prob=5.02e-05]
                Pred@1450: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose effect is rotate")) [score=6.906, prob=4.97e-05]
                Pred@1451: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is none")) [score=6.889, prob=4.89e-05]
                Pred@1452: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is simplify")) [score=6.883, prob=4.86e-05]
                Pred@1453: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is double")) [score=6.865, prob=4.77e-05]
                Pred@1454: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is multiply")) [score=6.863, prob=4.76e-05]
                Pred@1455: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is zero")) [score=6.860, prob=4.75e-05]
                Pred@1456: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate and whose main operator is half")) [score=6.859, prob=4.75e-05]
                Pred@1457: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is power")) [score=6.835, prob=4.63e-05]
                Pred@1458: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is successor")) [score=6.832, prob=4.62e-05]
                Pred@1459: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half and whose main operator is multiply")) [score=6.830, prob=4.61e-05]
                Pred@1460: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is divide")) [score=6.820, prob=4.57e-05]
                Pred@1461: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is compute")) [score=6.818, prob=4.55e-05]
                Pred@1462: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is introduce")) [score=6.802, prob=4.48e-05]
                Pred@1463: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose main operator is power")) [score=6.781, prob=4.39e-05]
                Pred@1464: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is distribute")) [score=6.764, prob=4.32e-05]
                Pred@1465: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is rotate")) [score=6.755, prob=4.28e-05]
                Pred@1466: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is associate")) [score=6.750, prob=4.26e-05]
                Pred@1467: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is power")) [score=6.750, prob=4.25e-05]
                Pred@1468: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is rotate")) [score=6.738, prob=4.20e-05]
                Pred@1469: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is rotate")) [score=6.736, prob=4.20e-05]
                Pred@1470: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose secondary operator is divide")) [score=6.736, prob=4.19e-05]
                Pred@1471: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is half")) [score=6.734, prob=4.19e-05]
                Pred@1472: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.divide))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not divide")) [score=6.712, prob=4.10e-05]
                Pred@1473: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is cast")) [score=6.706, prob=4.07e-05]
                Pred@1474: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is dissociate")) [score=6.688, prob=4.00e-05]
                Pred@1475: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is introduce")) [score=6.646, prob=3.84e-05]
                Pred@1476: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is compute")) [score=6.636, prob=3.80e-05]
                Pred@1477: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none and whose effect is rotate")) [score=6.633, prob=3.79e-05]
                Pred@1478: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is half")) [score=6.628, prob=3.77e-05]
                Pred@1479: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is square")) [score=6.612, prob=3.71e-05]
                Pred@1480: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry and whose main operator is multiply")) [score=6.603, prob=3.68e-05]
                Pred@1481: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.real))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is the reals")) [score=6.602, prob=3.67e-05]
                Pred@1482: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose effect is square")) [score=6.572, prob=3.56e-05]
                Pred@1483: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not square")) [score=6.538, prob=3.44e-05]
                Pred@1484: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half and whose effect is factorize")) [score=6.531, prob=3.42e-05]
                Pred@1485: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is double")) [score=6.514, prob=3.36e-05]
                Pred@1486: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is split")) [score=6.514, prob=3.36e-05]
                Pred@1487: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is multiply")) [score=6.480, prob=3.25e-05]
                Pred@1488: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is symmetry")) [score=6.473, prob=3.23e-05]
                Pred@1489: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.suc))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not successor")) [score=6.451, prob=3.16e-05]
                Pred@1490: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.&))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not cast")) [score=6.440, prob=3.12e-05]
                Pred@1491: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is multiply")) [score=6.415, prob=3.04e-05]
                Pred@1492: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.&))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not cast")) [score=6.413, prob=3.04e-05]
                Pred@1493: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is symmetry")) [score=6.411, prob=3.03e-05]
                Pred@1494: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.half))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not half")) [score=6.394, prob=2.98e-05]
                Pred@1495: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is introduce")) [score=6.388, prob=2.96e-05]
                Pred@1496: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose effect is rotate")) [score=6.346, prob=2.84e-05]
                Pred@1497: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string !=) en.domain.num))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose domain is not numbers")) [score=6.341, prob=2.83e-05]
                Pred@1498: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.suc))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not successor")) [score=6.332, prob=2.80e-05]
                Pred@1499: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is associate")) [score=6.326, prob=2.79e-05]
                Pred@1500: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string !=) en.domain.real))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is not the reals")) [score=6.321, prob=2.77e-05]
                Pred@1501: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power and whose main operator is multiply")) [score=6.309, prob=2.74e-05]
                Pred@1502: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is square")) [score=6.304, prob=2.72e-05]
                Pred@1503: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply and whose main operator is multiply")) [score=6.248, prob=2.58e-05]
                Pred@1504: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is none")) [score=6.240, prob=2.56e-05]
                Pred@1505: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_main_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose main operator is power")) [score=6.206, prob=2.47e-05]
                Pred@1506: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is eliminate")) [score=6.176, prob=2.40e-05]
                Pred@1507: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is dissociate")) [score=6.075, prob=2.17e-05]
                Pred@1508: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.distribute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is distribute")) [score=6.070, prob=2.16e-05]
                Pred@1509: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is factorize")) [score=6.070, prob=2.16e-05]
                Pred@1510: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.distribute))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not distribute")) [score=6.035, prob=2.08e-05]
                Pred@1511: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is rotate")) [score=6.024, prob=2.06e-05]
                Pred@1512: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is expand")) [score=6.019, prob=2.05e-05]
                Pred@1513: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_domain) (string =) en.domain.num))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose domain is numbers")) [score=5.994, prob=2.00e-05]
                Pred@1514: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is dissociate")) [score=5.982, prob=1.97e-05]
                Pred@1515: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.introduce))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not introduce")) [score=5.982, prob=1.97e-05]
                Pred@1516: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is square")) [score=5.974, prob=1.96e-05]
                Pred@1517: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is split")) [score=5.914, prob=1.84e-05]
                Pred@1518: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize and whose effect is factorize")) [score=5.892, prob=1.80e-05]
                Pred@1519: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose main operator is half")) [score=5.860, prob=1.75e-05]
                Pred@1520: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate and whose effect is square")) [score=5.844, prob=1.72e-05]
                Pred@1521: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is power")) [score=5.760, prob=1.58e-05]
                Pred@1522: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not square")) [score=5.723, prob=1.52e-05]
                Pred@1523: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.suc))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is successor")) [score=5.712, prob=1.51e-05]
                Pred@1524: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.simplify))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not simplify")) [score=5.654, prob=1.42e-05]
                Pred@1525: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is add")) [score=5.646, prob=1.41e-05]
                Pred@1526: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.half))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not half")) [score=5.580, prob=1.32e-05]
                Pred@1527: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.multiply))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not multiply")) [score=5.511, prob=1.23e-05]
                Pred@1528: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.associate))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not associate")) [score=5.497, prob=1.22e-05]
                Pred@1529: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not none")) [score=5.469, prob=1.18e-05]
                Pred@1530: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.convert))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not convert")) [score=5.457, prob=1.17e-05]
                Pred@1531: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.eliminate))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not eliminate")) [score=5.443, prob=1.15e-05]
                Pred@1532: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.simplify))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is simplify")) [score=5.322, prob=1.02e-05]
                Pred@1533: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.half))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not half")) [score=5.300, prob=9.98e-06]
                Pred@1534: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.rotate))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not rotate")) [score=5.299, prob=9.98e-06]
                Pred@1535: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.multiply))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not multiply")) [score=5.295, prob=9.93e-06]
                Pred@1536: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is divide")) [score=5.277, prob=9.75e-06]
                Pred@1537: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.compute))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is compute")) [score=5.260, prob=9.59e-06]
                Pred@1538: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.divide))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not divide")) [score=5.247, prob=9.46e-06]
                Pred@1539: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.divide))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is divide")) [score=5.245, prob=9.45e-06]
                Pred@1540: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is square")) [score=5.245, prob=9.45e-06]
                Pred@1541: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.add))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not add")) [score=5.243, prob=9.43e-06]
                Pred@1542: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is half")) [score=5.234, prob=9.35e-06]
                Pred@1543: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is half")) [score=5.185, prob=8.90e-06]
                Pred@1544: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.expand))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is not expand")) [score=5.174, prob=8.80e-06]
                Pred@1545: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.double))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is double")) [score=5.156, prob=8.64e-06]
                Pred@1546: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is none")) [score=5.138, prob=8.49e-06]
                Pred@1547: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.eliminate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is eliminate")) [score=5.063, prob=7.87e-06]
                Pred@1548: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.compute))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not compute")) [score=5.039, prob=7.69e-06]
                Pred@1549: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.convert))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is convert")) [score=5.015, prob=7.50e-06]
                Pred@1550: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string !=) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is not power")) [score=5.005, prob=7.43e-06]
                Pred@1551: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.none))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not none")) [score=4.928, prob=6.88e-06]
                Pred@1552: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string !=) en.operator.power))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is not power")) [score=4.911, prob=6.76e-06]
                Pred@1553: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.expand))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is expand")) [score=4.898, prob=6.68e-06]
                Pred@1554: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.&))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is cast")) [score=4.864, prob=6.46e-06]
                Pred@1555: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.zero))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not zero")) [score=4.846, prob=6.34e-06]
                Pred@1556: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.none))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is none")) [score=4.809, prob=6.11e-06]
                Pred@1557: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.square))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not square")) [score=4.795, prob=6.03e-06]
                Pred@1558: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.factorize))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not factorize")) [score=4.785, prob=5.97e-06]
                Pred@1559: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_sec_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose secondary operator is multiply")) [score=4.767, prob=5.86e-06]
                Pred@1560: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.symmetry))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not symmetry")) [score=4.710, prob=5.54e-06]
                Pred@1561: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.add))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is add")) [score=4.662, prob=5.27e-06]
                Pred@1562: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.double))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not double")) [score=4.647, prob=5.19e-06]
                Pred@1563: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.half))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is half")) [score=4.616, prob=5.04e-06]
                Pred@1564: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.symmetry))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is symmetry")) [score=4.594, prob=4.93e-06]
                Pred@1565: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.zero))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is zero")) [score=4.424, prob=4.16e-06]
                Pred@1566: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.associate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is associate")) [score=4.418, prob=4.13e-06]
                Pred@1567: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.dissociate))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not dissociate")) [score=4.389, prob=4.01e-06]
                Pred@1568: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.split))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is split")) [score=4.364, prob=3.91e-06]
                Pred@1569: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.dissociate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is dissociate")) [score=4.311, prob=3.71e-06]
                Pred@1570: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string !=) en.effect.split))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose effect is not split")) [score=4.292, prob=3.64e-06]
                Pred@1571: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.factorize))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is factorize")) [score=4.186, prob=3.28e-06]
                Pred@1572: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.rotate))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is rotate")) [score=4.116, prob=3.06e-06]
                Pred@1573: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.power))) (value (list (name en.theorem.POW_2))) (type fb:type.any) (canonicalUtterance "theorem whose main operator is power")) [score=4.040, prob=2.83e-06]
                Pred@1574: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.introduce))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is introduce")) [score=4.028, prob=2.80e-06]
                Pred@1575: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_main_operator)))) (value (list (name en.operator.power) (name en.operator.square))) (type fb:type.any) (canonicalUtterance "main operator of POW_2")) [score=3.759, prob=2.14e-06]
                Pred@1576: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_effect) (string =) en.effect.square))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose effect is square")) [score=3.720, prob=2.06e-06]
                Pred@1577: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_sec_operator)))) (value (list (name en.operator.none))) (type fb:type.any) (canonicalUtterance "secondary operator of POW_2")) [score=3.554, prob=1.74e-06]
                Pred@1578: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_domain)))) (value (list (name en.domain.real))) (type fb:type.any) (canonicalUtterance "domain of POW_2")) [score=3.524, prob=1.69e-06]
                Pred@1579: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.filter (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty (call edu.stanford.nlp.sempre.overnight.SimpleWorld.singleton en.theorem) (string !type)) (string theorem_main_operator) (string =) en.operator.multiply))) (value (list)) (type fb:type.any) (canonicalUtterance "theorem whose main operator is multiply")) [score=3.476, prob=1.61e-06]
                Pred@1580: (derivation (formula (call edu.stanford.nlp.sempre.overnight.SimpleWorld.listValue (call edu.stanford.nlp.sempre.overnight.SimpleWorld.getProperty en.theorem.POW_2 (string theorem_effect)))) (value (list (name en.effect.expand))) (type fb:type.any) (canonicalUtterance "effect of POW_2")) [score=2.846, prob=8.58e-07]
              }
              Current: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1581 parsedNumCandidates=1581 numCorrect=0 numPartialCorrect=0 numIncorrect=0 timeout=0 numTokens=1 parseTime=2024 maxCellSize=3945 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=23601 numCells=92
              Cumulative(iter=0.train): correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1581 parsedNumCandidates=1581 numCorrect=0 numPartialCorrect=0 numIncorrect=0 timeout=0 numTokens=1 parseTime=2024 maxCellSize=3945 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=23601 numCells=92
            } [2.4s, cum. 2.4s]
          } [2.4s, cum. 2.4s]
          Stats for iter=0.train: correct=0 oracle=0 partCorrect=0 partOracle=0 parsed=1 numCandidates=1581 parsedNumCandidates=1581 numCorrect=0 numPartialCorrect=0 numIncorrect=0 timeout=0 numTokens=1 parseTime=2024 maxCellSize=3945 fallOffBeam=0 totalDerivs=0 numOfFeaturizedDerivs=23601 numCells=92
          Evaluation stats for iter=0.train {
            correct = 0/ << 0 ~ 0 >> /0 (1)
            oracle = 0/ << 0 ~ 0 >> /0 (1)
            partCorrect = 0/ << 0 ~ 0 >> /0 (1)
            partOracle = 0/ << 0 ~ 0 >> /0 (1)
            parsed = 1/ << 1 ~ 0 >> /1 (1)
            numCandidates = 1581/ << 1581 ~ 0 >> /1581 (1)
            parsedNumCandidates = 1581/ << 1581 ~ 0 >> /1581 (1)
            numCorrect = 0/ << 0 ~ 0 >> /0 (1)
            numPartialCorrect = 0/ << 0 ~ 0 >> /0 (1)
            numIncorrect = 0/ << 0 ~ 0 >> /0 (1)
            timeout = 0/ << 0 ~ 0 >> /0 (1)
            numTokens = 1/ << 1 ~ 0 >> /1 (1)
            parseTime = 2024/ << 2024 ~ 0 >> /2024 (1)
            maxCellSize = 3945@$CP2:9/ << 3945 ~ 0 >> /3945@$CP2:9 (1)
            fallOffBeam = 0/ << 0 ~ 0 >> /0 (1)
            totalDerivs = 0/ << 0 ~ 0 >> /0 (1)
            numOfFeaturizedDerivs = 23601/ << 23601 ~ 0 >> /23601 (1)
            numCells = 92/ << 92 ~ 0 >> /92 (1)
          }
        } [2.4s, cum. 2.4s]
        StopWatchSet {
          FeatureExtractor.extractLocal	0.541s (0.0s x 23601)
          Executor.execute	0.724s (0.0s x 14973)
          Parser.parse	2.4s (2.4s x 1)
        }
        Params.write(state/execs/41.exec/params.0) 
        StopWatchSet {
          FeatureExtractor.extractLocal	0.541s (0.0s x 23601)
          Executor.execute	0.724s (0.0s x 14973)
          Parser.parse	2.4s (2.4s x 1)
        }
        Params.write(state/execs/41.exec/params.0) 
      } [2.5s, cum. 2.5s]
    } [2.5s, cum. 2.5s]
    Execution directory: state/execs/41.exec
  } [2.5s, cum. 2.6s]
